.include "hdr.asm"
.accu 16
.index 16
.16bit
.define __vblank_locals 0
.define __main_locals 0

.SECTION ".vblanktext_0x0" SUPERFREE

vblank:
; sub sp,#__vblank_locals
.ifgr __vblank_locals 0
tsa
sec
sbc #__vblank_locals
tas
.endif
; call r 0x2f0
jsr.l spcProcess
; call r 0x2f0
jsr.l WaitForVBlank
; gsym_addr t 0 a 204 ind 204
; ERROR no jump found to patch
; add sp, #__vblank_locals
.ifgr __vblank_locals 0
tsa
clc
adc #__vblank_locals
tas
.endif
rtl
.ENDS

.SECTION ".maintext_0x1" SUPERFREE

main:
; sub sp,#__main_locals
.ifgr __main_locals 0
tsa
sec
sbc #__main_locals
tas
.endif
; call r 0x2f0
jsr.l initSpc
; load 0
; type 132 reg 0x12f0 extra 0x0
; ld4 #bg1_m_end + 0, tcc__r0 (type 0x84)
lda.w #:bg1_m_end
sta.b tcc__r0h
lda.w #bg1_m_end + 0
sta.b tcc__r0
; load 1
; type 132 reg 0x12f0 extra 0x0
; ld4 #bg1_m + 0, tcc__r1 (type 0x84)
lda.w #:bg1_m
sta.b tcc__r1h
lda.w #bg1_m + 0
sta.b tcc__r1
; gen_opi len 4 op -
; sbc tcc__r1 (0x1), tcc__r0 (0x0) (fr type 0x84 c 0 r type 0x4)
; length xxy 4 vtop->type 0x84
sec
lda.b tcc__r0
sbc.b tcc__r1
sta.b tcc__r0
; push2 imm r 0xf0
pea.w 29696
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; ldpush before load type 0x10 reg 0x0
; ldpush2 (type 0x10 reg 0x0) tcc__r0
pei (tcc__r0)
; push4 imm r 0x52f0
pea.w :bg1_m
pea.w bg1_m + 0
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; call r 0x2f0
jsr.l bgInitMapSet
; add sp, #10
tsa
clc
adc #10
tas
; load 0
; type 132 reg 0x12f0 extra 0x0
; ld4 #bg1_tiles_end + 0, tcc__r0 (type 0x84)
lda.w #:bg1_tiles_end
sta.b tcc__r0h
lda.w #bg1_tiles_end + 0
sta.b tcc__r0
; load 1
; type 132 reg 0x12f0 extra 0x0
; ld4 #bg1_tiles + 0, tcc__r1 (type 0x84)
lda.w #:bg1_tiles
sta.b tcc__r1h
lda.w #bg1_tiles + 0
sta.b tcc__r1
; gen_opi len 4 op -
; sbc tcc__r1 (0x1), tcc__r0 (0x0) (fr type 0x84 c 0 r type 0x11)
; length xxy 4 vtop->type 0x84
sec
lda.b tcc__r0
sbc.b tcc__r1
sta.b tcc__r0
; load 1
; type 132 reg 0x12f0 extra 0x0
; ld4 #bg1_p_end + 0, tcc__r1 (type 0x84)
lda.w #:bg1_p_end
sta.b tcc__r1h
lda.w #bg1_p_end + 0
sta.b tcc__r1
; load 2
; type 132 reg 0x12f0 extra 0x0
; ld4 #bg1_p + 0, tcc__r2 (type 0x84)
lda.w #:bg1_p
sta.b tcc__r2h
lda.w #bg1_p + 0
sta.b tcc__r2
; gen_opi len 4 op -
; sbc tcc__r2 (0x2), tcc__r1 (0x1) (fr type 0x84 c 0 r type 0x10)
; length xxy 4 vtop->type 0x84
sec
lda.b tcc__r1
sbc.b tcc__r2
sta.b tcc__r1
; push2 imm r 0xf0
pea.w 0
; push2 imm r 0xf0
pea.w 16
; ldpush before load type 0x10 reg 0x1
; ldpush2 (type 0x10 reg 0x1) tcc__r1
pei (tcc__r1)
; ldpush before load type 0x10 reg 0x0
; ldpush2 (type 0x10 reg 0x0) tcc__r0
pei (tcc__r0)
; push1 imm r 0xf0
sep #$20
lda #1
pha
rep #$20
; push4 imm r 0x52f0
pea.w :bg1_p
pea.w bg1_p + 0
; push4 imm r 0x52f0
pea.w :bg1_tiles
pea.w bg1_tiles + 0
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; call r 0x2f0
jsr.l bgInitTileSet
; add sp, #18
tsa
clc
adc #18
tas
; load 0
; type 132 reg 0x12f0 extra 0x0
; ld4 #bg2_m_end + 0, tcc__r0 (type 0x84)
lda.w #:bg2_m_end
sta.b tcc__r0h
lda.w #bg2_m_end + 0
sta.b tcc__r0
; load 1
; type 132 reg 0x12f0 extra 0x0
; ld4 #bg2_m + 0, tcc__r1 (type 0x84)
lda.w #:bg2_m
sta.b tcc__r1h
lda.w #bg2_m + 0
sta.b tcc__r1
; gen_opi len 4 op -
; sbc tcc__r1 (0x1), tcc__r0 (0x0) (fr type 0x84 c 0 r type 0x4)
; length xxy 4 vtop->type 0x84
sec
lda.b tcc__r0
sbc.b tcc__r1
sta.b tcc__r0
; push2 imm r 0xf0
pea.w 30720
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; ldpush before load type 0x10 reg 0x0
; ldpush2 (type 0x10 reg 0x0) tcc__r0
pei (tcc__r0)
; push4 imm r 0x52f0
pea.w :bg2_m
pea.w bg2_m + 0
; push1 imm r 0xf0
sep #$20
lda #1
pha
rep #$20
; call r 0x2f0
jsr.l bgInitMapSet
; add sp, #10
tsa
clc
adc #10
tas
; load 0
; type 132 reg 0x12f0 extra 0x0
; ld4 #bg2_tiles_end + 0, tcc__r0 (type 0x84)
lda.w #:bg2_tiles_end
sta.b tcc__r0h
lda.w #bg2_tiles_end + 0
sta.b tcc__r0
; load 1
; type 132 reg 0x12f0 extra 0x0
; ld4 #bg2_tiles + 0, tcc__r1 (type 0x84)
lda.w #:bg2_tiles
sta.b tcc__r1h
lda.w #bg2_tiles + 0
sta.b tcc__r1
; gen_opi len 4 op -
; sbc tcc__r1 (0x1), tcc__r0 (0x0) (fr type 0x84 c 0 r type 0x11)
; length xxy 4 vtop->type 0x84
sec
lda.b tcc__r0
sbc.b tcc__r1
sta.b tcc__r0
; load 1
; type 132 reg 0x12f0 extra 0x6f697461
; ld4 #bg2_p_end + 0, tcc__r1 (type 0x84)
lda.w #:bg2_p_end
sta.b tcc__r1h
lda.w #bg2_p_end + 0
sta.b tcc__r1
; load 2
; type 132 reg 0x12f0 extra 0x0
; ld4 #bg2_p + 0, tcc__r2 (type 0x84)
lda.w #:bg2_p
sta.b tcc__r2h
lda.w #bg2_p + 0
sta.b tcc__r2
; gen_opi len 4 op -
; sbc tcc__r2 (0x2), tcc__r1 (0x1) (fr type 0x84 c 0 r type 0x10)
; length xxy 4 vtop->type 0x84
sec
lda.b tcc__r1
sbc.b tcc__r2
sta.b tcc__r1
; push2 imm r 0xf0
pea.w 4096
; push2 imm r 0xf0
pea.w 16
; ldpush before load type 0x10 reg 0x1
; ldpush2 (type 0x10 reg 0x1) tcc__r1
pei (tcc__r1)
; ldpush before load type 0x10 reg 0x0
; ldpush2 (type 0x10 reg 0x0) tcc__r0
pei (tcc__r0)
; push1 imm r 0xf0
sep #$20
lda #2
pha
rep #$20
; push4 imm r 0x52f0
pea.w :bg2_p
pea.w bg2_p + 0
; push4 imm r 0x52f0
pea.w :bg2_tiles
pea.w bg2_tiles + 0
; push1 imm r 0xf0
sep #$20
lda #1
pha
rep #$20
; call r 0x2f0
jsr.l bgInitTileSet
; add sp, #18
tsa
clc
adc #18
tas
; load 0
; type 132 reg 0x12f0 extra 0x6e006f
; ld4 #bg3_tiles_end + 0, tcc__r0 (type 0x84)
lda.w #:bg3_tiles_end
sta.b tcc__r0h
lda.w #bg3_tiles_end + 0
sta.b tcc__r0
; load 1
; type 132 reg 0x12f0 extra 0x0
; ld4 #bg3_tiles + 0, tcc__r1 (type 0x84)
lda.w #:bg3_tiles
sta.b tcc__r1h
lda.w #bg3_tiles + 0
sta.b tcc__r1
; gen_opi len 4 op -
; sbc tcc__r1 (0x1), tcc__r0 (0x0) (fr type 0x84 c 0 r type 0x11)
; length xxy 4 vtop->type 0x84
sec
lda.b tcc__r0
sbc.b tcc__r1
sta.b tcc__r0
; load 1
; type 132 reg 0x12f0 extra 0x75006d
; ld4 #bg3_p_end + 0, tcc__r1 (type 0x84)
lda.w #:bg3_p_end
sta.b tcc__r1h
lda.w #bg3_p_end + 0
sta.b tcc__r1
; load 2
; type 132 reg 0x12f0 extra 0x70005c
; ld4 #bg3_p + 0, tcc__r2 (type 0x84)
lda.w #:bg3_p
sta.b tcc__r2h
lda.w #bg3_p + 0
sta.b tcc__r2
; gen_opi len 4 op -
; sbc tcc__r2 (0x2), tcc__r1 (0x1) (fr type 0x84 c 0 r type 0x10)
; length xxy 4 vtop->type 0x84
sec
lda.b tcc__r1
sbc.b tcc__r2
sta.b tcc__r1
; push2 imm r 0xf0
pea.w 8192
; push2 imm r 0xf0
pea.w 4
; ldpush before load type 0x10 reg 0x1
; ldpush2 (type 0x10 reg 0x1) tcc__r1
pei (tcc__r1)
; ldpush before load type 0x10 reg 0x0
; ldpush2 (type 0x10 reg 0x0) tcc__r0
pei (tcc__r0)
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; push4 imm r 0x52f0
pea.w :bg3_p
pea.w bg3_p + 0
; push4 imm r 0x52f0
pea.w :bg3_tiles
pea.w bg3_tiles + 0
; push1 imm r 0xf0
sep #$20
lda #2
pha
rep #$20
; call r 0x2f0
jsr.l bgInitTileSet
; add sp, #18
tsa
clc
adc #18
tas
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; push2 imm r 0xf0
pea.w 31744
; push1 imm r 0xf0
sep #$20
lda #2
pha
rep #$20
; call r 0x2f0
jsr.l bgSetMapPtr
; add sp, #4
tsa
clc
adc #4
tas
; load 0
; type 132 reg 0x12f0 extra 0x0
; ld4 #font_tiles_end + 0, tcc__r0 (type 0x84)
lda.w #:font_tiles_end
sta.b tcc__r0h
lda.w #font_tiles_end + 0
sta.b tcc__r0
; load 1
; type 132 reg 0x12f0 extra 0x0
; ld4 #font_tiles + 0, tcc__r1 (type 0x84)
lda.w #:font_tiles
sta.b tcc__r1h
lda.w #font_tiles + 0
sta.b tcc__r1
; gen_opi len 4 op -
; sbc tcc__r1 (0x1), tcc__r0 (0x0) (fr type 0x84 c 0 r type 0x4)
; length xxy 4 vtop->type 0x84
sec
lda.b tcc__r0
sbc.b tcc__r1
sta.b tcc__r0
; push2 imm r 0xf0
pea.w 9984
; ldpush before load type 0x10 reg 0x0
; ldpush2 (type 0x10 reg 0x0) tcc__r0
pei (tcc__r0)
; push4 imm r 0x52f0
pea.w :font_tiles
pea.w font_tiles + 0
; push1 imm r 0xf0
sep #$20
lda #2
pha
rep #$20
; call r 0x2f0
jsr.l bgInitTileSetData
; add sp, #9
tsa
clc
adc #9
tas
; call r 0x2f0
jsr.l drawMenu
; call r 0x2f0
jsr.l initMenu
; call r 0x2f0
jsr.l initBSTime
; call r 0x2f0
jsr.l bsTimeReset
; call r 0x2f0
jsr.l playMusic
; push1 imm r 0xf0
sep #$20
lda #8
pha
rep #$20
; push1 imm r 0xf0
sep #$20
lda #1
pha
rep #$20
; call r 0x2f0
jsr.l setMode
; add sp, #2
pla
; push2 imm r 0xf0
pea.w 65535
; push2 imm r 0xf0
pea.w 0
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; call r 0x2f0
jsr.l bgSetScroll
; add sp, #5
tsa
clc
adc #5
tas
; push2 imm r 0xf0
pea.w 65535
; push2 imm r 0xf0
pea.w 0
; push1 imm r 0xf0
sep #$20
lda #1
pha
rep #$20
; call r 0x2f0
jsr.l bgSetScroll
; add sp, #5
tsa
clc
adc #5
tas
; push2 imm r 0xf0
pea.w 65535
; push2 imm r 0xf0
pea.w 0
; push1 imm r 0xf0
sep #$20
lda #2
pha
rep #$20
; call r 0x2f0
jsr.l bgSetScroll
; add sp, #5
tsa
clc
adc #5
tas
; call r 0x2f0
jsr.l initTrain
; call r 0x2f0
jsr.l loadSprites
; call r 0x2f0
jsr.l drawTrain
; push1 imm r 0xf0
sep #$20
lda #2
pha
rep #$20
; call r 0x2f0
jsr.l setFadeEffect
; add sp, #1
tsa
clc
adc #1
tas
; call r 0x2f0
jsr.l initScrollingEffect
__local_1:
; gtst inv 1 t 0 v 240 r 8490 ind 8490
; uncond jump: nop
; gtst finished; t 0
; call r 0x2f0
jsr.l dmaMenu
; call r 0x2f0
jsr.l updateSeaWaves
; call r 0x2f0
jsr.l dmaSeaWaves
; call r 0x2f0
jsr.l updateScrollingEffect
; call r 0x2f0
jsr.l updateTrain
; call r 0x2f0
jsr.l drawTrain
; call r 0x2f0
jsr.l animateTrain
; gtst inv 1 t 0 v 240 r 8808 ind 8808
; load 0
; type 17 reg 0x53f0 extra 0x0
; ld1 [showTime + 0], tcc__r0
lda.w #0
sep #$20
lda.l showTime + 0
rep #$20
sta.b tcc__r0
; gsym_addr t 0 a 8977 ind 8977
; ERROR no jump found to patch
; tcc__r0 to compare reg
lda.b tcc__r0 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 9096 ind 9096
; cmp op 0x95 inv 1 v 243 r 9096
; cmp ne
bne +
; gsym_addr t 0 a 9183 ind 9183
; ERROR no jump found to patch
brl __local_0
+
; gtst finished; t 9096
; push4 imm r 0x2f0
pea.w :bstime
pea.w bstime + 0
; call r 0x2f0
jsr.l bsTimeUpdate
; add sp, #4
tsa
clc
adc #4
tas
; call r 0x2f0
jsr.l printDate
; call r 0x2f0
jsr.l printTime
__local_0:
; gsym_addr t 9096 a 9465 ind 9465
; call r 0x2f0
jsr.l readInputs
; call r 0x2f0
jsr.l vblank
; gjmp_addr 8490 at 9560
jmp.w __local_1
; gsym_addr t 9560 a 8490 ind 9601
; gsym_addr t 0 a 9636 ind 9636
; gsym_addr t 0 a 8490 ind 9668
; load 0
; type 0 reg 0xf0 extra 0x0
; ld2 #0,tcc__r0
lda.w #0
sta.b tcc__r0
; gjmp_addr 0 at 9777
jmp.w __local_2
; gsym_addr t 9777 a 0 ind 9815
__local_2:
; gsym_addr t 9777 a 9847 ind 9847
; add sp, #__main_locals
.ifgr __main_locals 0
tsa
clc
adc #__main_locals
tas
.endif
rtl
.ENDS
.RAMSECTION "ram{WLA_FILENAME}.data" APPENDTO "globram.data"

music dsb 1
seaFrame dsb 1
seaState dsb 1
selectedOption dsb 1
showTime dsb 1

.ENDS

.SECTION "{WLA_FILENAME}.data" APPENDTO "glob.data"

.db $0
.db $0
.db $0
.db $2
.db $0
.ENDS

.SECTION ".rodata" SUPERFREE

.ENDS

.RAMSECTION ".bss" BANK $7e SLOT 2
bstime dsb 6
train dsb 8
pad0 dsb 2
padA dsb 1
padUp dsb 1
padDown dsb 1
.ENDS

.include "hdr.asm"
.accu 16
.index 16
.16bit
.define __playSound_locals 0
.define __playMusic_locals 1
.define __initSpc_locals 1

.SECTION ".playSoundtext_0x0" SUPERFREE

playSound:
; sub sp,#__playSound_locals
.ifgr __playSound_locals 0
tsa
sec
sbc #__playSound_locals
tas
.endif
; load 0
; type 16 reg 0x1f2 extra 0x324a2480
; ld2 [sp,3],tcc__r0
; stack adjust: fc + disp - loc - 256 -251
lda 3 + __playSound_locals + 1,s
sta.b tcc__r0
; gen_opi len 2 op 
; shl tcc__r0, #1
asl.b tcc__r0
; load 1
; type 36 reg 0x2f0 extra 0x0
; ld12 #sfx_pitch + 0, tcc__r1 (type 0x24)
; FISHY! length <> PTR_SIZE! (may be an array)
lda.w #:sfx_pitch
sta.b tcc__r1h
lda.w #sfx_pitch + 0
sta.b tcc__r1
; gen_opi len 2 op +
; adc tcc__r0 (0x0), tcc__r1 (0x1) (fr type 0x24 c 0 r type 0x86)
; length xxy 12 vtop->type 0x24
clc
lda.b tcc__r1
adc.b tcc__r0
sta.b tcc__r1
; push1 imm r 0xf0
sep #$20
lda #136
pha
rep #$20
; ldpush before load type 0x10 reg 0x1f2
; load 0
; type 16 reg 0x1f2 extra 0x0
; ld2 [sp,3],tcc__r0
; stack adjust: fc + disp - loc - 256 -250
lda 4 + __playSound_locals + 1,s
sta.b tcc__r0
; ldpush2 (type 0x10 reg 0x0) tcc__r0
pei (tcc__r0)
; ldpush before load type 0x10 reg 0x101
; load 0
; type 16 reg 0x101 extra 0x0
; ld2 [tcc__r1,0],tcc__r0
lda.b [tcc__r1]
sta.b tcc__r0
; ldpush2 (type 0x10 reg 0x0) tcc__r0
pei (tcc__r0)
; call r 0x2f0
jsr.l spcEffect
; add sp, #5
tsa
clc
adc #5
tas
; call r 0x2f0
jsr.l spcProcess
; gsym_addr t 0 a 1300 ind 1300
; ERROR no jump found to patch
; add sp, #__playSound_locals
.ifgr __playSound_locals 0
tsa
clc
adc #__playSound_locals
tas
.endif
rtl
.ENDS

.SECTION ".playMusictext_0x1" SUPERFREE

playMusic:
; sub sp,#__playMusic_locals
.ifgr __playMusic_locals 0
tsa
sec
sbc #__playMusic_locals
tas
.endif
; call r 0x2f0
jsr.l spcStop
; load 0
; type 17 reg 0x53f0 extra 0x0
; ld1 [music + 0], tcc__r0
lda.w #0
sep #$20
lda.l music + 0
rep #$20
sta.b tcc__r0
; gen_opi len 2 op 0x9f
; cmpcd tcc__r0, #0
ldx #1
lda.b tcc__r0
sec
sbc.w #0
tay
beq ++
bvc +
eor #$8000
+
bpl +++
++
dex
+++
stx.b tcc__r5
; gtst inv 1 t 0 v 5 r 1919 ind 1919
; gsym_addr t 0 a 1956 ind 1956
; ERROR no jump found to patch
; tcc__r5 to compare reg
lda.b tcc__r5 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 2075 ind 2075
; cmp op 0x95 inv 1 v 243 r 2075
; cmp ne
bne +
; gsym_addr t 0 a 2162 ind 2162
; ERROR no jump found to patch
brl __local_0
+
; gtst finished; t 2075
; load 0
; type 17 reg 0x53f0 extra 0x0
; ld1 [music + 0], tcc__r0
lda.w #0
sep #$20
lda.l music + 0
rep #$20
sta.b tcc__r0
; ldpush before load type 0x10 reg 0x0
; ldpush2 (type 0x10 reg 0x0) tcc__r0
pei (tcc__r0)
; call r 0x2f0
jsr.l spcLoad
; add sp, #2
pla
__local_0:
; gsym_addr t 2075 a 2526 ind 2526
; load 0
; type 17 reg 0xf0 extra 0x0
; ld1 #0,tcc__r0
lda.w #0
sta.b tcc__r0
; store r 0x0 fr 0x51f2 ft 0x11 fc 0xffffffff
; st1 tcc__r0, [sp,-1]
; stack adjust: fc + disp - loc - 256 -254
sep #$20
lda.b tcc__r0
sta -1 + __playMusic_locals + 1,s
rep #$20
__local_3:
; load 0
; type 17 reg 0x51f2 extra 0x0
; ld1 [sp,-1],tcc__r0
; stack adjust: fc + disp - loc - 256 -254
lda.w #0
sep #$20
lda -1 + __playMusic_locals + 1,s
rep #$20
sta.b tcc__r0
; gen_opi len 2 op 0x9c
; cmpcd tcc__r0, #6
ldx #1
lda.b tcc__r0
sec
sbc.w #6
tay
bvc +
eor #$8000
+
bmi +++
++
dex
+++
stx.b tcc__r5
; gtst inv 1 t 0 v 5 r 3131 ind 3131
; gsym_addr t 0 a 3168 ind 3168
; tcc__r5 to compare reg
lda.b tcc__r5 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 3256 ind 3256
; cmp op 0x95 inv 1 v 243 r 3256
; cmp ne
bne +
; gsym_addr t 0 a 3343 ind 3343
brl __local_1
+
; gtst finished; t 3256
; gjmp_addr 0 at 3415
jmp.w __local_2
; gsym_addr t 3415 a 0 ind 3453
__local_4:
; load 0
; type 17 reg 0x51f2 extra 0x0
; ld1 [sp,-1],tcc__r0
; stack adjust: fc + disp - loc - 256 -254
lda.w #0
sep #$20
lda -1 + __playMusic_locals + 1,s
rep #$20
sta.b tcc__r0
; load 1
; type 0 reg 0x0 extra 0x1ae
; mov tcc__r0, tcc__r1
lda.b tcc__r0
sta.b tcc__r1
lda.b tcc__r0h
sta.b tcc__r1h
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x0 c -1 r type 0x11)
; length xxy 2 vtop->type 0x0
inc.b tcc__r0
; store r 0x0 fr 0x51f2 ft 0x11 fc 0xffffffff
; st1 tcc__r0, [sp,-1]
; stack adjust: fc + disp - loc - 256 -254
sep #$20
lda.b tcc__r0
sta -1 + __playMusic_locals + 1,s
rep #$20
; gjmp_addr 2817 at 4096
jmp.w __local_3
; gsym_addr t 4096 a 2817 ind 4137
__local_2:
; gsym_addr t 3415 a 4172 ind 4172
; load 0
; type 17 reg 0x51f2 extra 0x0
; ld1 [sp,-1],tcc__r0
; stack adjust: fc + disp - loc - 256 -254
lda.w #0
sep #$20
lda -1 + __playMusic_locals + 1,s
rep #$20
sta.b tcc__r0
; ldpush before load type 0x10 reg 0x0
; ldpush2 (type 0x10 reg 0x0) tcc__r0
pei (tcc__r0)
; call r 0x2f0
jsr.l spcLoadEffect
; add sp, #2
pla
; gjmp_addr 3485 at 4530
jmp.w __local_4
; gsym_addr t 4530 a 3485 ind 4571
__local_1:
; gsym_addr t 3256 a 4606 ind 4606
; gsym_addr t 0 a 3485 ind 4641
; load 0
; type 17 reg 0x53f0 extra 0x0
; ld1 [music + 0], tcc__r0
lda.w #0
sep #$20
lda.l music + 0
rep #$20
sta.b tcc__r0
; gen_opi len 2 op 0x9f
; cmpcd tcc__r0, #0
ldx #1
lda.b tcc__r0
sec
sbc.w #0
tay
beq ++
bvc +
eor #$8000
+
bpl +++
++
dex
+++
stx.b tcc__r5
; gtst inv 1 t 0 v 5 r 4938 ind 4938
; gsym_addr t 0 a 4975 ind 4975
; tcc__r5 to compare reg
lda.b tcc__r5 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 5063 ind 5063
; cmp op 0x95 inv 1 v 243 r 5063
; cmp ne
bne +
; gsym_addr t 0 a 5150 ind 5150
brl __local_5
+
; gtst finished; t 5063
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; call r 0x2f0
jsr.l spcPlay
; add sp, #1
tsa
clc
adc #1
tas
__local_5:
; gsym_addr t 5063 a 5331 ind 5331
; gsym_addr t 0 a 5366 ind 5366
; add sp, #__playMusic_locals
.ifgr __playMusic_locals 0
tsa
clc
adc #__playMusic_locals
tas
.endif
rtl
.ENDS

.SECTION ".initSpctext_0x2" SUPERFREE

initSpc:
; sub sp,#__initSpc_locals
.ifgr __initSpc_locals 0
tsa
sec
sbc #__initSpc_locals
tas
.endif
; call r 0x2f0
jsr.l spcBoot
; push4 imm r 0x52f0
pea.w :SOUNDBANK__
pea.w SOUNDBANK__ + 0
; call r 0x2f0
jsr.l spcSetBank
; add sp, #4
tsa
clc
adc #4
tas
; push2 imm r 0xf0
pea.w 0
; call r 0x2f0
jsr.l spcLoad
; add sp, #2
pla
; call r 0x2f0
jsr.l spcStop
; push2 imm r 0xf0
pea.w 0
; call r 0x2f0
jsr.l spcLoad
; add sp, #2
pla
; load 0
; type 17 reg 0xf0 extra 0x0
; ld1 #0,tcc__r0
lda.w #0
sta.b tcc__r0
; store r 0x0 fr 0x51f2 ft 0x11 fc 0xffffffff
; st1 tcc__r0, [sp,-1]
; stack adjust: fc + disp - loc - 256 -254
sep #$20
lda.b tcc__r0
sta -1 + __initSpc_locals + 1,s
rep #$20
__local_8:
; load 0
; type 17 reg 0x51f2 extra 0x0
; ld1 [sp,-1],tcc__r0
; stack adjust: fc + disp - loc - 256 -254
lda.w #0
sep #$20
lda -1 + __initSpc_locals + 1,s
rep #$20
sta.b tcc__r0
; gen_opi len 2 op 0x9c
; cmpcd tcc__r0, #6
ldx #1
lda.b tcc__r0
sec
sbc.w #6
tay
bvc +
eor #$8000
+
bmi +++
++
dex
+++
stx.b tcc__r5
; gtst inv 1 t 0 v 5 r 6546 ind 6546
; gsym_addr t 0 a 6583 ind 6583
; tcc__r5 to compare reg
lda.b tcc__r5 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 6671 ind 6671
; cmp op 0x95 inv 1 v 243 r 6671
; cmp ne
bne +
; gsym_addr t 0 a 6758 ind 6758
brl __local_6
+
; gtst finished; t 6671
; gjmp_addr 0 at 6830
jmp.w __local_7
; gsym_addr t 6830 a 0 ind 6868
__local_9:
; load 0
; type 17 reg 0x51f2 extra 0x0
; ld1 [sp,-1],tcc__r0
; stack adjust: fc + disp - loc - 256 -254
lda.w #0
sep #$20
lda -1 + __initSpc_locals + 1,s
rep #$20
sta.b tcc__r0
; load 1
; type 0 reg 0x0 extra 0x108
; mov tcc__r0, tcc__r1
lda.b tcc__r0
sta.b tcc__r1
lda.b tcc__r0h
sta.b tcc__r1h
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x0 c -1 r type 0x11)
; length xxy 2 vtop->type 0x0
inc.b tcc__r0
; store r 0x0 fr 0x51f2 ft 0x11 fc 0xffffffff
; st1 tcc__r0, [sp,-1]
; stack adjust: fc + disp - loc - 256 -254
sep #$20
lda.b tcc__r0
sta -1 + __initSpc_locals + 1,s
rep #$20
; gjmp_addr 6234 at 7507
jmp.w __local_8
; gsym_addr t 7507 a 6234 ind 7548
__local_7:
; gsym_addr t 6830 a 7583 ind 7583
; load 0
; type 17 reg 0x51f2 extra 0x0
; ld1 [sp,-1],tcc__r0
; stack adjust: fc + disp - loc - 256 -254
lda.w #0
sep #$20
lda -1 + __initSpc_locals + 1,s
rep #$20
sta.b tcc__r0
; ldpush before load type 0x10 reg 0x0
; ldpush2 (type 0x10 reg 0x0) tcc__r0
pei (tcc__r0)
; call r 0x2f0
jsr.l spcLoadEffect
; add sp, #2
pla
; gjmp_addr 6900 at 7939
jmp.w __local_9
; gsym_addr t 7939 a 6900 ind 7980
__local_6:
; gsym_addr t 6671 a 8015 ind 8015
; gsym_addr t 0 a 6900 ind 8050
; load 0
; type 17 reg 0xf0 extra 0x0
; ld1 #1,tcc__r0
lda.w #1
sta.b tcc__r0
; store r 0x0 fr 0x53f0 ft 0x11 fc 0x0
; st1 tcc__r0, [music,0]
sep #$20
lda.b tcc__r0
sta.l music + 0
rep #$20
; push1 imm r 0xf0
sep #$20
lda #255
pha
rep #$20
; call r 0x2f0
jsr.l spcSetModuleVolume
; add sp, #1
tsa
clc
adc #1
tas
; gsym_addr t 0 a 8394 ind 8394
; add sp, #__initSpc_locals
.ifgr __initSpc_locals 0
tsa
clc
adc #__initSpc_locals
tas
.endif
rtl
.ENDS
.RAMSECTION "ram{WLA_FILENAME}.data" APPENDTO "globram.data"

music dsb 2
sfx_pitch dsb 12

.ENDS

.SECTION "{WLA_FILENAME}.data" APPENDTO "glob.data"

.db $0,$0
.db $1,$0,$1,$0,$2,$0,$2,$0,$2,$0,$2,$0
.ENDS

.SECTION ".rodata" SUPERFREE

.ENDS

.RAMSECTION ".bss" BANK $7e SLOT 2
.ENDS

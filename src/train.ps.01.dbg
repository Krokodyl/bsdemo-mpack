.include "hdr.asm"
.accu 16
.index 16
.16bit
.define __initTrain_locals 0
.define __loadSprites_locals 0
.define __drawTrain_locals 0
.define __drawRods_locals 0
.define __drawCharacters_locals 0
.define __animateTrain_locals 0
.define __animateRods_locals 0
.define __updateTrain_locals 0

.SECTION ".initTraintext_0x0" SUPERFREE

initTrain:
; sub sp,#__initTrain_locals
.ifgr __initTrain_locals 0
tsa
sec
sbc #__initTrain_locals
tas
.endif
; load 0
; type 16 reg 0xf0 extra 0x0
; ld2 #400,tcc__r0
lda.w #400
sta.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x10 fc 0x0
; st2 tcc__r0, [train,0]
lda.b tcc__r0
sta.l train + 0
; load 0
; type 16 reg 0xf0 extra 0x0
; ld2 #93,tcc__r0
lda.w #93
sta.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x10 fc 0x2
; st2 tcc__r0, [train,2]
lda.b tcc__r0
sta.l train + 2
; load 0
; type 17 reg 0xf0 extra 0x0
; ld1 #0,tcc__r0
lda.w #0
sta.b tcc__r0
; store r 0x0 fr 0x53f0 ft 0x11 fc 0x4
; st1 tcc__r0, [train,4]
sep #$20
lda.b tcc__r0
sta.l train + 4
rep #$20
; load 0
; type 17 reg 0xf0 extra 0x0
; ld1 #0,tcc__r0
lda.w #0
sta.b tcc__r0
; store r 0x0 fr 0x53f0 ft 0x11 fc 0x5
; st1 tcc__r0, [train,5]
sep #$20
lda.b tcc__r0
sta.l train + 5
rep #$20
; load 0
; type 17 reg 0xf0 extra 0x0
; ld1 #0,tcc__r0
lda.w #0
sta.b tcc__r0
; store r 0x0 fr 0x53f0 ft 0x11 fc 0x6
; st1 tcc__r0, [train,6]
sep #$20
lda.b tcc__r0
sta.l train + 6
rep #$20
; gsym_addr t 0 a 1070 ind 1070
; ERROR no jump found to patch
; add sp, #__initTrain_locals
.ifgr __initTrain_locals 0
tsa
clc
adc #__initTrain_locals
tas
.endif
rtl
.ENDS

.SECTION ".loadSpritestext_0x1" SUPERFREE

loadSprites:
; sub sp,#__loadSprites_locals
.ifgr __loadSprites_locals 0
tsa
sec
sbc #__loadSprites_locals
tas
.endif
; load 0
; type 132 reg 0x12f0 extra 0x0
; ld4 #sprites_tiles_end + 0, tcc__r0 (type 0x84)
lda.w #:sprites_tiles_end
sta.b tcc__r0h
lda.w #sprites_tiles_end + 0
sta.b tcc__r0
; load 1
; type 132 reg 0x12f0 extra 0x0
; ld4 #sprites_tiles + 0, tcc__r1 (type 0x84)
lda.w #:sprites_tiles
sta.b tcc__r1h
lda.w #sprites_tiles + 0
sta.b tcc__r1
; gen_opi len 4 op -
; sbc tcc__r1 (0x1), tcc__r0 (0x0) (fr type 0x84 c 0 r type 0x4)
; length xxy 4 vtop->type 0x84
sec
lda.b tcc__r0
sbc.b tcc__r1
sta.b tcc__r0
; load 1
; type 132 reg 0x12f0 extra 0x0
; ld4 #sprites_p_end + 0, tcc__r1 (type 0x84)
lda.w #:sprites_p_end
sta.b tcc__r1h
lda.w #sprites_p_end + 0
sta.b tcc__r1
; load 2
; type 132 reg 0x12f0 extra 0x0
; ld4 #sprites_p + 0, tcc__r2 (type 0x84)
lda.w #:sprites_p
sta.b tcc__r2h
lda.w #sprites_p + 0
sta.b tcc__r2
; gen_opi len 4 op -
; sbc tcc__r2 (0x2), tcc__r1 (0x1) (fr type 0x84 c 0 r type 0x4)
; length xxy 4 vtop->type 0x84
sec
lda.b tcc__r1
sbc.b tcc__r2
sta.b tcc__r1
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; push2 imm r 0xf0
pea.w 16384
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; ldpush before load type 0x10 reg 0x1
; ldpush2 (type 0x10 reg 0x1) tcc__r1
pei (tcc__r1)
; push4 imm r 0x52f0
pea.w :sprites_p
pea.w sprites_p + 0
; ldpush before load type 0x10 reg 0x0
; ldpush2 (type 0x10 reg 0x0) tcc__r0
pei (tcc__r0)
; push4 imm r 0x52f0
pea.w :sprites_tiles
pea.w sprites_tiles + 0
; call r 0x2f0
jsr.l oamInitGfxSet
; add sp, #16
tsa
clc
adc #16
tas
; gsym_addr t 0 a 2885 ind 2885
; ERROR no jump found to patch
; add sp, #__loadSprites_locals
.ifgr __loadSprites_locals 0
tsa
clc
adc #__loadSprites_locals
tas
.endif
rtl
.ENDS

.SECTION ".drawTraintext_0x2" SUPERFREE

drawTrain:
; sub sp,#__drawTrain_locals
.ifgr __drawTrain_locals 0
tsa
sec
sbc #__drawTrain_locals
tas
.endif
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; push1 imm r 0xf0
sep #$20
lda #1
pha
rep #$20
; push2 imm r 0xf0
pea.w 84
; call r 0x2f0
jsr.l oamSetEx
; add sp, #4
tsa
clc
adc #4
tas
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; push1 imm r 0xf0
sep #$20
lda #1
pha
rep #$20
; push2 imm r 0xf0
pea.w 88
; call r 0x2f0
jsr.l oamSetEx
; add sp, #4
tsa
clc
adc #4
tas
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; push1 imm r 0xf0
sep #$20
lda #1
pha
rep #$20
; push2 imm r 0xf0
pea.w 92
; call r 0x2f0
jsr.l oamSetEx
; add sp, #4
tsa
clc
adc #4
tas
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; push2 imm r 0xf0
pea.w 80
; call r 0x2f0
jsr.l oamSetEx
; add sp, #4
tsa
clc
adc #4
tas
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; push1 imm r 0xf0
sep #$20
lda #1
pha
rep #$20
; push2 imm r 0xf0
pea.w 96
; call r 0x2f0
jsr.l oamSetEx
; add sp, #4
tsa
clc
adc #4
tas
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; push1 imm r 0xf0
sep #$20
lda #1
pha
rep #$20
; push2 imm r 0xf0
pea.w 100
; call r 0x2f0
jsr.l oamSetEx
; add sp, #4
tsa
clc
adc #4
tas
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; push1 imm r 0xf0
sep #$20
lda #1
pha
rep #$20
; push2 imm r 0xf0
pea.w 104
; call r 0x2f0
jsr.l oamSetEx
; add sp, #4
tsa
clc
adc #4
tas
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; push1 imm r 0xf0
sep #$20
lda #1
pha
rep #$20
; push2 imm r 0xf0
pea.w 108
; call r 0x2f0
jsr.l oamSetEx
; add sp, #4
tsa
clc
adc #4
tas
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; push1 imm r 0xf0
sep #$20
lda #1
pha
rep #$20
; push2 imm r 0xf0
pea.w 112
; call r 0x2f0
jsr.l oamSetEx
; add sp, #4
tsa
clc
adc #4
tas
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; push1 imm r 0xf0
sep #$20
lda #1
pha
rep #$20
; push2 imm r 0xf0
pea.w 116
; call r 0x2f0
jsr.l oamSetEx
; add sp, #4
tsa
clc
adc #4
tas
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; push1 imm r 0xf0
sep #$20
lda #1
pha
rep #$20
; push2 imm r 0xf0
pea.w 120
; call r 0x2f0
jsr.l oamSetEx
; add sp, #4
tsa
clc
adc #4
tas
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; push1 imm r 0xf0
sep #$20
lda #1
pha
rep #$20
; push2 imm r 0xf0
pea.w 124
; call r 0x2f0
jsr.l oamSetEx
; add sp, #4
tsa
clc
adc #4
tas
; push1 imm r 0xf0
sep #$20
lda #2
pha
rep #$20
; push2 imm r 0xf0
pea.w 0
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; push1 imm r 0xf0
sep #$20
lda #3
pha
rep #$20
; ldpush before load type 0x10 reg 0x3f0
; load 0
; type 16 reg 0x3f0 extra 0x0
; ld2 [train + 2], tcc__r0
lda.l train + 2
sta.b tcc__r0
; ldpush2 (type 0x10 reg 0x0) tcc__r0
pei (tcc__r0)
; ldpush before load type 0x10 reg 0x3f0
; load 0
; type 16 reg 0x3f0 extra 0x0
; ld2 [train + 0], tcc__r0
lda.l train + 0
sta.b tcc__r0
; ldpush2 (type 0x10 reg 0x0) tcc__r0
pei (tcc__r0)
; push2 imm r 0xf0
pea.w 84
; call r 0x2f0
jsr.l oamSet
; add sp, #12
tsa
clc
adc #12
tas
; load 0
; type 16 reg 0x3f0 extra 0x2000
; ld2 [train + 2], tcc__r0
lda.l train + 2
sta.b tcc__r0
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c 2 r type 0x10)
; length xxy 2 vtop->type 0x10
clc
lda.b tcc__r0
adc.w #16
sta.b tcc__r0
; push1 imm r 0xf0
sep #$20
lda #2
pha
rep #$20
; push2 imm r 0xf0
pea.w 32
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; push1 imm r 0xf0
sep #$20
lda #3
pha
rep #$20
; ldpush before load type 0x10 reg 0x0
; ldpush2 (type 0x10 reg 0x0) tcc__r0
pei (tcc__r0)
; ldpush before load type 0x10 reg 0x3f0
; load 0
; type 16 reg 0x3f0 extra 0x0
; ld2 [train + 0], tcc__r0
lda.l train + 0
sta.b tcc__r0
; ldpush2 (type 0x10 reg 0x0) tcc__r0
pei (tcc__r0)
; push2 imm r 0xf0
pea.w 88
; call r 0x2f0
jsr.l oamSet
; add sp, #12
tsa
clc
adc #12
tas
; load 0
; type 16 reg 0x3f0 extra 0x2000
; ld2 [train + 0], tcc__r0
lda.l train + 0
sta.b tcc__r0
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c 0 r type 0x10)
; length xxy 2 vtop->type 0x10
clc
lda.b tcc__r0
adc.w #16
sta.b tcc__r0
; load 1
; type 16 reg 0x3f0 extra 0x2000
; ld2 [train + 2], tcc__r1
lda.l train + 2
sta.b tcc__r1
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r1 (0x1) (fr type 0x10 c 2 r type 0x10)
; length xxy 2 vtop->type 0x10
clc
lda.b tcc__r1
adc.w #16
sta.b tcc__r1
; push1 imm r 0xf0
sep #$20
lda #2
pha
rep #$20
; push2 imm r 0xf0
pea.w 34
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; push1 imm r 0xf0
sep #$20
lda #3
pha
rep #$20
; ldpush before load type 0x10 reg 0x1
; ldpush2 (type 0x10 reg 0x1) tcc__r1
pei (tcc__r1)
; ldpush before load type 0x10 reg 0x0
; ldpush2 (type 0x10 reg 0x0) tcc__r0
pei (tcc__r0)
; push2 imm r 0xf0
pea.w 92
; call r 0x2f0
jsr.l oamSet
; add sp, #12
tsa
clc
adc #12
tas
; load 0
; type 16 reg 0x3f0 extra 0x2000
; ld2 [train + 0], tcc__r0
lda.l train + 0
sta.b tcc__r0
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c 0 r type 0x10)
; length xxy 2 vtop->type 0x10
clc
lda.b tcc__r0
adc.w #16
sta.b tcc__r0
; load 1
; type 16 reg 0x3f0 extra 0x2000
; ld2 [train + 2], tcc__r1
lda.l train + 2
sta.b tcc__r1
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r1 (0x1) (fr type 0x10 c 2 r type 0x10)
; length xxy 2 vtop->type 0x10
clc
lda.b tcc__r1
adc.w #16
sta.b tcc__r1
; push1 imm r 0xf0
sep #$20
lda #2
pha
rep #$20
; push2 imm r 0xf0
pea.w 2
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; push1 imm r 0xf0
sep #$20
lda #3
pha
rep #$20
; ldpush before load type 0x10 reg 0x1
; ldpush2 (type 0x10 reg 0x1) tcc__r1
pei (tcc__r1)
; ldpush before load type 0x10 reg 0x0
; ldpush2 (type 0x10 reg 0x0) tcc__r0
pei (tcc__r0)
; push2 imm r 0xf0
pea.w 80
; call r 0x2f0
jsr.l oamSet
; add sp, #12
tsa
clc
adc #12
tas
; load 0
; type 16 reg 0x3f0 extra 0x2000
; ld2 [train + 0], tcc__r0
lda.l train + 0
sta.b tcc__r0
; gen_opi len 2 op -
; sbc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c 0 r type 0x10)
; length xxy 2 vtop->type 0x10
sec
lda.b tcc__r0
sbc.w #32
sta.b tcc__r0
; load 1
; type 16 reg 0x3f0 extra 0x2000
; ld2 [train + 2], tcc__r1
lda.l train + 2
sta.b tcc__r1
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r1 (0x1) (fr type 0x10 c 2 r type 0x10)
; length xxy 2 vtop->type 0x10
clc
lda.b tcc__r1
adc.w #16
sta.b tcc__r1
; push1 imm r 0xf0
sep #$20
lda #3
pha
rep #$20
; push2 imm r 0xf0
pea.w 36
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; push1 imm r 0xf0
sep #$20
lda #3
pha
rep #$20
; ldpush before load type 0x10 reg 0x1
; ldpush2 (type 0x10 reg 0x1) tcc__r1
pei (tcc__r1)
; ldpush before load type 0x10 reg 0x0
; ldpush2 (type 0x10 reg 0x0) tcc__r0
pei (tcc__r0)
; push2 imm r 0xf0
pea.w 96
; call r 0x2f0
jsr.l oamSet
; add sp, #12
tsa
clc
adc #12
tas
; load 0
; type 16 reg 0x3f0 extra 0x2000
; ld2 [train + 0], tcc__r0
lda.l train + 0
sta.b tcc__r0
; gen_opi len 2 op -
; sbc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c 0 r type 0x10)
; length xxy 2 vtop->type 0x10
sec
lda.b tcc__r0
sbc.w #16
sta.b tcc__r0
; load 1
; type 16 reg 0x3f0 extra 0x2000
; ld2 [train + 2], tcc__r1
lda.l train + 2
sta.b tcc__r1
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r1 (0x1) (fr type 0x10 c 2 r type 0x10)
; length xxy 2 vtop->type 0x10
clc
lda.b tcc__r1
adc.w #16
sta.b tcc__r1
; push1 imm r 0xf0
sep #$20
lda #3
pha
rep #$20
; push2 imm r 0xf0
pea.w 38
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; push1 imm r 0xf0
sep #$20
lda #3
pha
rep #$20
; ldpush before load type 0x10 reg 0x1
; ldpush2 (type 0x10 reg 0x1) tcc__r1
pei (tcc__r1)
; ldpush before load type 0x10 reg 0x0
; ldpush2 (type 0x10 reg 0x0) tcc__r0
pei (tcc__r0)
; push2 imm r 0xf0
pea.w 100
; call r 0x2f0
jsr.l oamSet
; add sp, #12
tsa
clc
adc #12
tas
; load 0
; type 16 reg 0x3f0 extra 0x2000
; ld2 [train + 0], tcc__r0
lda.l train + 0
sta.b tcc__r0
; gen_opi len 2 op -
; sbc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c 0 r type 0x10)
; length xxy 2 vtop->type 0x10
sec
lda.b tcc__r0
sbc.w #64
sta.b tcc__r0
; load 1
; type 16 reg 0x3f0 extra 0x2000
; ld2 [train + 2], tcc__r1
lda.l train + 2
sta.b tcc__r1
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r1 (0x1) (fr type 0x10 c 2 r type 0x10)
; length xxy 2 vtop->type 0x10
clc
lda.b tcc__r1
adc.w #16
sta.b tcc__r1
; push1 imm r 0xf0
sep #$20
lda #5
pha
rep #$20
; push2 imm r 0xf0
pea.w 36
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; push1 imm r 0xf0
sep #$20
lda #3
pha
rep #$20
; ldpush before load type 0x10 reg 0x1
; ldpush2 (type 0x10 reg 0x1) tcc__r1
pei (tcc__r1)
; ldpush before load type 0x10 reg 0x0
; ldpush2 (type 0x10 reg 0x0) tcc__r0
pei (tcc__r0)
; push2 imm r 0xf0
pea.w 104
; call r 0x2f0
jsr.l oamSet
; add sp, #12
tsa
clc
adc #12
tas
; load 0
; type 16 reg 0x3f0 extra 0x2000
; ld2 [train + 0], tcc__r0
lda.l train + 0
sta.b tcc__r0
; gen_opi len 2 op -
; sbc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c 0 r type 0x10)
; length xxy 2 vtop->type 0x10
sec
lda.b tcc__r0
sbc.w #48
sta.b tcc__r0
; load 1
; type 16 reg 0x3f0 extra 0x2000
; ld2 [train + 2], tcc__r1
lda.l train + 2
sta.b tcc__r1
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r1 (0x1) (fr type 0x10 c 2 r type 0x10)
; length xxy 2 vtop->type 0x10
clc
lda.b tcc__r1
adc.w #16
sta.b tcc__r1
; push1 imm r 0xf0
sep #$20
lda #5
pha
rep #$20
; push2 imm r 0xf0
pea.w 38
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; push1 imm r 0xf0
sep #$20
lda #3
pha
rep #$20
; ldpush before load type 0x10 reg 0x1
; ldpush2 (type 0x10 reg 0x1) tcc__r1
pei (tcc__r1)
; ldpush before load type 0x10 reg 0x0
; ldpush2 (type 0x10 reg 0x0) tcc__r0
pei (tcc__r0)
; push2 imm r 0xf0
pea.w 108
; call r 0x2f0
jsr.l oamSet
; add sp, #12
tsa
clc
adc #12
tas
; load 0
; type 16 reg 0x3f0 extra 0x2000
; ld2 [train + 0], tcc__r0
lda.l train + 0
sta.b tcc__r0
; gen_opi len 2 op -
; sbc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c 0 r type 0x10)
; length xxy 2 vtop->type 0x10
sec
lda.b tcc__r0
sbc.w #96
sta.b tcc__r0
; load 1
; type 16 reg 0x3f0 extra 0x2000
; ld2 [train + 2], tcc__r1
lda.l train + 2
sta.b tcc__r1
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r1 (0x1) (fr type 0x10 c 2 r type 0x10)
; length xxy 2 vtop->type 0x10
clc
lda.b tcc__r1
adc.w #16
sta.b tcc__r1
; push1 imm r 0xf0
sep #$20
lda #7
pha
rep #$20
; push2 imm r 0xf0
pea.w 36
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; push1 imm r 0xf0
sep #$20
lda #3
pha
rep #$20
; ldpush before load type 0x10 reg 0x1
; ldpush2 (type 0x10 reg 0x1) tcc__r1
pei (tcc__r1)
; ldpush before load type 0x10 reg 0x0
; ldpush2 (type 0x10 reg 0x0) tcc__r0
pei (tcc__r0)
; push2 imm r 0xf0
pea.w 112
; call r 0x2f0
jsr.l oamSet
; add sp, #12
tsa
clc
adc #12
tas
; load 0
; type 16 reg 0x3f0 extra 0x2000
; ld2 [train + 0], tcc__r0
lda.l train + 0
sta.b tcc__r0
; gen_opi len 2 op -
; sbc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c 0 r type 0x10)
; length xxy 2 vtop->type 0x10
sec
lda.b tcc__r0
sbc.w #80
sta.b tcc__r0
; load 1
; type 16 reg 0x3f0 extra 0x2000
; ld2 [train + 2], tcc__r1
lda.l train + 2
sta.b tcc__r1
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r1 (0x1) (fr type 0x10 c 2 r type 0x10)
; length xxy 2 vtop->type 0x10
clc
lda.b tcc__r1
adc.w #16
sta.b tcc__r1
; push1 imm r 0xf0
sep #$20
lda #7
pha
rep #$20
; push2 imm r 0xf0
pea.w 38
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; push1 imm r 0xf0
sep #$20
lda #3
pha
rep #$20
; ldpush before load type 0x10 reg 0x1
; ldpush2 (type 0x10 reg 0x1) tcc__r1
pei (tcc__r1)
; ldpush before load type 0x10 reg 0x0
; ldpush2 (type 0x10 reg 0x0) tcc__r0
pei (tcc__r0)
; push2 imm r 0xf0
pea.w 116
; call r 0x2f0
jsr.l oamSet
; add sp, #12
tsa
clc
adc #12
tas
; load 0
; type 16 reg 0x3f0 extra 0x2000
; ld2 [train + 0], tcc__r0
lda.l train + 0
sta.b tcc__r0
; gen_opi len 2 op -
; sbc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c 0 r type 0x10)
; length xxy 2 vtop->type 0x10
sec
lda.b tcc__r0
sbc.w #128
sta.b tcc__r0
; load 1
; type 16 reg 0x3f0 extra 0x2000
; ld2 [train + 2], tcc__r1
lda.l train + 2
sta.b tcc__r1
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r1 (0x1) (fr type 0x10 c 2 r type 0x10)
; length xxy 2 vtop->type 0x10
clc
lda.b tcc__r1
adc.w #16
sta.b tcc__r1
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; push2 imm r 0xf0
pea.w 40
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; push1 imm r 0xf0
sep #$20
lda #3
pha
rep #$20
; ldpush before load type 0x10 reg 0x1
; ldpush2 (type 0x10 reg 0x1) tcc__r1
pei (tcc__r1)
; ldpush before load type 0x10 reg 0x0
; ldpush2 (type 0x10 reg 0x0) tcc__r0
pei (tcc__r0)
; push2 imm r 0xf0
pea.w 120
; call r 0x2f0
jsr.l oamSet
; add sp, #12
tsa
clc
adc #12
tas
; load 0
; type 16 reg 0x3f0 extra 0x2000
; ld2 [train + 0], tcc__r0
lda.l train + 0
sta.b tcc__r0
; gen_opi len 2 op -
; sbc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c 0 r type 0x10)
; length xxy 2 vtop->type 0x10
sec
lda.b tcc__r0
sbc.w #112
sta.b tcc__r0
; load 1
; type 16 reg 0x3f0 extra 0x2000
; ld2 [train + 2], tcc__r1
lda.l train + 2
sta.b tcc__r1
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r1 (0x1) (fr type 0x10 c 2 r type 0x10)
; length xxy 2 vtop->type 0x10
clc
lda.b tcc__r1
adc.w #16
sta.b tcc__r1
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; push2 imm r 0xf0
pea.w 42
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; push1 imm r 0xf0
sep #$20
lda #3
pha
rep #$20
; ldpush before load type 0x10 reg 0x1
; ldpush2 (type 0x10 reg 0x1) tcc__r1
pei (tcc__r1)
; ldpush before load type 0x10 reg 0x0
; ldpush2 (type 0x10 reg 0x0) tcc__r0
pei (tcc__r0)
; push2 imm r 0xf0
pea.w 124
; call r 0x2f0
jsr.l oamSet
; add sp, #12
tsa
clc
adc #12
tas
; call r 0x2f0
jsr.l drawRods
; call r 0x2f0
jsr.l drawCharacters
; gsym_addr t 0 a 17228 ind 17228
; ERROR no jump found to patch
; add sp, #__drawTrain_locals
.ifgr __drawTrain_locals 0
tsa
clc
adc #__drawTrain_locals
tas
.endif
rtl
.ENDS

.SECTION ".drawRodstext_0x3" SUPERFREE

drawRods:
; sub sp,#__drawRods_locals
.ifgr __drawRods_locals 0
tsa
sec
sbc #__drawRods_locals
tas
.endif
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; push1 imm r 0xf0
sep #$20
lda #1
pha
rep #$20
; push2 imm r 0xf0
pea.w 40
; call r 0x2f0
jsr.l oamSetEx
; add sp, #4
tsa
clc
adc #4
tas
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; push1 imm r 0xf0
sep #$20
lda #1
pha
rep #$20
; push2 imm r 0xf0
pea.w 44
; call r 0x2f0
jsr.l oamSetEx
; add sp, #4
tsa
clc
adc #4
tas
; load 0
; type 16 reg 0x3f0 extra 0x2000
; ld2 [train + 2], tcc__r0
lda.l train + 2
sta.b tcc__r0
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c 2 r type 0x10)
; length xxy 2 vtop->type 0x10
clc
lda.b tcc__r0
adc.w #25
sta.b tcc__r0
; push1 imm r 0xf0
sep #$20
lda #2
pha
rep #$20
; push2 imm r 0xf0
pea.w 64
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; push1 imm r 0xf0
sep #$20
lda #3
pha
rep #$20
; ldpush before load type 0x10 reg 0x0
; ldpush2 (type 0x10 reg 0x0) tcc__r0
pei (tcc__r0)
; ldpush before load type 0x10 reg 0x3f0
; load 0
; type 16 reg 0x3f0 extra 0x0
; ld2 [train + 0], tcc__r0
lda.l train + 0
sta.b tcc__r0
; ldpush2 (type 0x10 reg 0x0) tcc__r0
pei (tcc__r0)
; push2 imm r 0xf0
pea.w 40
; call r 0x2f0
jsr.l oamSet
; add sp, #12
tsa
clc
adc #12
tas
; load 0
; type 16 reg 0x3f0 extra 0x2000
; ld2 [train + 0], tcc__r0
lda.l train + 0
sta.b tcc__r0
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c 0 r type 0x10)
; length xxy 2 vtop->type 0x10
clc
lda.b tcc__r0
adc.w #16
sta.b tcc__r0
; load 1
; type 16 reg 0x3f0 extra 0x2000
; ld2 [train + 2], tcc__r1
lda.l train + 2
sta.b tcc__r1
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r1 (0x1) (fr type 0x10 c 2 r type 0x10)
; length xxy 2 vtop->type 0x10
clc
lda.b tcc__r1
adc.w #25
sta.b tcc__r1
; push1 imm r 0xf0
sep #$20
lda #2
pha
rep #$20
; push2 imm r 0xf0
pea.w 66
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; push1 imm r 0xf0
sep #$20
lda #3
pha
rep #$20
; ldpush before load type 0x10 reg 0x1
; ldpush2 (type 0x10 reg 0x1) tcc__r1
pei (tcc__r1)
; ldpush before load type 0x10 reg 0x0
; ldpush2 (type 0x10 reg 0x0) tcc__r0
pei (tcc__r0)
; push2 imm r 0xf0
pea.w 44
; call r 0x2f0
jsr.l oamSet
; add sp, #12
tsa
clc
adc #12
tas
; gsym_addr t 0 a 19790 ind 19790
; ERROR no jump found to patch
; add sp, #__drawRods_locals
.ifgr __drawRods_locals 0
tsa
clc
adc #__drawRods_locals
tas
.endif
rtl
.ENDS

.SECTION ".drawCharacterstext_0x4" SUPERFREE

drawCharacters:
; sub sp,#__drawCharacters_locals
.ifgr __drawCharacters_locals 0
tsa
sec
sbc #__drawCharacters_locals
tas
.endif
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; push1 imm r 0xf0
sep #$20
lda #1
pha
rep #$20
; push2 imm r 0xf0
pea.w 0
; call r 0x2f0
jsr.l oamSetEx
; add sp, #4
tsa
clc
adc #4
tas
; load 0
; type 16 reg 0x3f0 extra 0x0
; ld2 [train + 0], tcc__r0
lda.l train + 0
sta.b tcc__r0
; gen_opi len 2 op -
; sbc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c 0 r type 0x10)
; length xxy 2 vtop->type 0x10
sec
lda.b tcc__r0
sbc.w #32
sta.b tcc__r0
; load 1
; type 16 reg 0x3f0 extra 0x0
; ld2 [train + 2], tcc__r1
lda.l train + 2
sta.b tcc__r1
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r1 (0x1) (fr type 0x10 c 2 r type 0x10)
; length xxy 2 vtop->type 0x10
clc
lda.b tcc__r1
adc.w #8
sta.b tcc__r1
; push1 imm r 0xf0
sep #$20
lda #6
pha
rep #$20
; push2 imm r 0xf0
pea.w 4
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; push1 imm r 0xf0
sep #$20
lda #3
pha
rep #$20
; ldpush before load type 0x10 reg 0x1
; ldpush2 (type 0x10 reg 0x1) tcc__r1
pei (tcc__r1)
; ldpush before load type 0x10 reg 0x0
; ldpush2 (type 0x10 reg 0x0) tcc__r0
pei (tcc__r0)
; push2 imm r 0xf0
pea.w 0
; call r 0x2f0
jsr.l oamSet
; add sp, #12
tsa
clc
adc #12
tas
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; push1 imm r 0xf0
sep #$20
lda #1
pha
rep #$20
; push2 imm r 0xf0
pea.w 4
; call r 0x2f0
jsr.l oamSetEx
; add sp, #4
tsa
clc
adc #4
tas
; load 0
; type 16 reg 0x3f0 extra 0x0
; ld2 [train + 0], tcc__r0
lda.l train + 0
sta.b tcc__r0
; gen_opi len 2 op -
; sbc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c 0 r type 0x10)
; length xxy 2 vtop->type 0x10
sec
lda.b tcc__r0
sbc.w #64
sta.b tcc__r0
; load 1
; type 16 reg 0x3f0 extra 0x0
; ld2 [train + 2], tcc__r1
lda.l train + 2
sta.b tcc__r1
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r1 (0x1) (fr type 0x10 c 2 r type 0x10)
; length xxy 2 vtop->type 0x10
clc
lda.b tcc__r1
adc.w #8
sta.b tcc__r1
; push1 imm r 0xf0
sep #$20
lda #3
pha
rep #$20
; push2 imm r 0xf0
pea.w 6
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; push1 imm r 0xf0
sep #$20
lda #3
pha
rep #$20
; ldpush before load type 0x10 reg 0x1
; ldpush2 (type 0x10 reg 0x1) tcc__r1
pei (tcc__r1)
; ldpush before load type 0x10 reg 0x0
; ldpush2 (type 0x10 reg 0x0) tcc__r0
pei (tcc__r0)
; push2 imm r 0xf0
pea.w 4
; call r 0x2f0
jsr.l oamSet
; add sp, #12
tsa
clc
adc #12
tas
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; push1 imm r 0xf0
sep #$20
lda #1
pha
rep #$20
; push2 imm r 0xf0
pea.w 8
; call r 0x2f0
jsr.l oamSetEx
; add sp, #4
tsa
clc
adc #4
tas
; load 0
; type 16 reg 0x3f0 extra 0x0
; ld2 [train + 0], tcc__r0
lda.l train + 0
sta.b tcc__r0
; gen_opi len 2 op -
; sbc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c 0 r type 0x10)
; length xxy 2 vtop->type 0x10
sec
lda.b tcc__r0
sbc.w #96
sta.b tcc__r0
; load 1
; type 16 reg 0x3f0 extra 0x0
; ld2 [train + 2], tcc__r1
lda.l train + 2
sta.b tcc__r1
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r1 (0x1) (fr type 0x10 c 2 r type 0x10)
; length xxy 2 vtop->type 0x10
clc
lda.b tcc__r1
adc.w #8
sta.b tcc__r1
; push1 imm r 0xf0
sep #$20
lda #1
pha
rep #$20
; push2 imm r 0xf0
pea.w 8
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; push1 imm r 0xf0
sep #$20
lda #3
pha
rep #$20
; ldpush before load type 0x10 reg 0x1
; ldpush2 (type 0x10 reg 0x1) tcc__r1
pei (tcc__r1)
; ldpush before load type 0x10 reg 0x0
; ldpush2 (type 0x10 reg 0x0) tcc__r0
pei (tcc__r0)
; push2 imm r 0xf0
pea.w 8
; call r 0x2f0
jsr.l oamSet
; add sp, #12
tsa
clc
adc #12
tas
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; push1 imm r 0xf0
sep #$20
lda #1
pha
rep #$20
; push2 imm r 0xf0
pea.w 12
; call r 0x2f0
jsr.l oamSetEx
; add sp, #4
tsa
clc
adc #4
tas
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; push1 imm r 0xf0
sep #$20
lda #1
pha
rep #$20
; push2 imm r 0xf0
pea.w 16
; call r 0x2f0
jsr.l oamSetEx
; add sp, #4
tsa
clc
adc #4
tas
; load 0
; type 16 reg 0x3f0 extra 0x0
; ld2 [train + 0], tcc__r0
lda.l train + 0
sta.b tcc__r0
; gen_opi len 2 op -
; sbc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c 0 r type 0x10)
; length xxy 2 vtop->type 0x10
sec
lda.b tcc__r0
sbc.w #128
sta.b tcc__r0
; load 1
; type 16 reg 0x3f0 extra 0x0
; ld2 [train + 2], tcc__r1
lda.l train + 2
sta.b tcc__r1
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r1 (0x1) (fr type 0x10 c 2 r type 0x10)
; length xxy 2 vtop->type 0x10
clc
lda.b tcc__r1
adc.w #8
sta.b tcc__r1
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; push2 imm r 0xf0
pea.w 12
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; push1 imm r 0xf0
sep #$20
lda #3
pha
rep #$20
; ldpush before load type 0x10 reg 0x1
; ldpush2 (type 0x10 reg 0x1) tcc__r1
pei (tcc__r1)
; ldpush before load type 0x10 reg 0x0
; ldpush2 (type 0x10 reg 0x0) tcc__r0
pei (tcc__r0)
; push2 imm r 0xf0
pea.w 12
; call r 0x2f0
jsr.l oamSet
; add sp, #12
tsa
clc
adc #12
tas
; load 0
; type 16 reg 0x3f0 extra 0x0
; ld2 [train + 0], tcc__r0
lda.l train + 0
sta.b tcc__r0
; gen_opi len 2 op -
; sbc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c 0 r type 0x10)
; length xxy 2 vtop->type 0x10
sec
lda.b tcc__r0
sbc.w #112
sta.b tcc__r0
; load 1
; type 16 reg 0x3f0 extra 0x0
; ld2 [train + 2], tcc__r1
lda.l train + 2
sta.b tcc__r1
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r1 (0x1) (fr type 0x10 c 2 r type 0x10)
; length xxy 2 vtop->type 0x10
clc
lda.b tcc__r1
adc.w #8
sta.b tcc__r1
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; push2 imm r 0xf0
pea.w 14
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; push1 imm r 0xf0
sep #$20
lda #0
pha
rep #$20
; push1 imm r 0xf0
sep #$20
lda #3
pha
rep #$20
; ldpush before load type 0x10 reg 0x1
; ldpush2 (type 0x10 reg 0x1) tcc__r1
pei (tcc__r1)
; ldpush before load type 0x10 reg 0x0
; ldpush2 (type 0x10 reg 0x0) tcc__r0
pei (tcc__r0)
; push2 imm r 0xf0
pea.w 16
; call r 0x2f0
jsr.l oamSet
; add sp, #12
tsa
clc
adc #12
tas
; gsym_addr t 0 a 26107 ind 26107
; ERROR no jump found to patch
; add sp, #__drawCharacters_locals
.ifgr __drawCharacters_locals 0
tsa
clc
adc #__drawCharacters_locals
tas
.endif
rtl
.ENDS

.SECTION ".animateTraintext_0x5" SUPERFREE

animateTrain:
; sub sp,#__animateTrain_locals
.ifgr __animateTrain_locals 0
tsa
sec
sbc #__animateTrain_locals
tas
.endif
; ldpush before load type 0x10 reg 0x3f0
; load 0
; type 16 reg 0x3f0 extra 0x0
; ld2 [train + 2], tcc__r0
lda.l train + 2
sta.b tcc__r0
; ldpush2 (type 0x10 reg 0x0) tcc__r0
pei (tcc__r0)
; ldpush before load type 0x10 reg 0x3f0
; load 0
; type 16 reg 0x3f0 extra 0x0
; ld2 [train + 0], tcc__r0
lda.l train + 0
sta.b tcc__r0
; ldpush2 (type 0x10 reg 0x0) tcc__r0
pei (tcc__r0)
; push2 imm r 0xf0
pea.w 84
; call r 0x2f0
jsr.l oamSetXY
; add sp, #6
tsa
clc
adc #6
tas
; load 0
; type 16 reg 0x3f0 extra 0x0
; ld2 [train + 2], tcc__r0
lda.l train + 2
sta.b tcc__r0
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c 2 r type 0x10)
; length xxy 2 vtop->type 0x10
clc
lda.b tcc__r0
adc.w #16
sta.b tcc__r0
; ldpush before load type 0x10 reg 0x0
; ldpush2 (type 0x10 reg 0x0) tcc__r0
pei (tcc__r0)
; ldpush before load type 0x10 reg 0x3f0
; load 0
; type 16 reg 0x3f0 extra 0x0
; ld2 [train + 0], tcc__r0
lda.l train + 0
sta.b tcc__r0
; ldpush2 (type 0x10 reg 0x0) tcc__r0
pei (tcc__r0)
; push2 imm r 0xf0
pea.w 88
; call r 0x2f0
jsr.l oamSetXY
; add sp, #6
tsa
clc
adc #6
tas
; load 0
; type 16 reg 0x3f0 extra 0x0
; ld2 [train + 0], tcc__r0
lda.l train + 0
sta.b tcc__r0
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c 0 r type 0x10)
; length xxy 2 vtop->type 0x10
clc
lda.b tcc__r0
adc.w #16
sta.b tcc__r0
; load 1
; type 16 reg 0x3f0 extra 0x0
; ld2 [train + 2], tcc__r1
lda.l train + 2
sta.b tcc__r1
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r1 (0x1) (fr type 0x10 c 2 r type 0x10)
; length xxy 2 vtop->type 0x10
clc
lda.b tcc__r1
adc.w #16
sta.b tcc__r1
; ldpush before load type 0x10 reg 0x1
; ldpush2 (type 0x10 reg 0x1) tcc__r1
pei (tcc__r1)
; ldpush before load type 0x10 reg 0x0
; ldpush2 (type 0x10 reg 0x0) tcc__r0
pei (tcc__r0)
; push2 imm r 0xf0
pea.w 92
; call r 0x2f0
jsr.l oamSetXY
; add sp, #6
tsa
clc
adc #6
tas
; load 0
; type 16 reg 0x3f0 extra 0x0
; ld2 [train + 0], tcc__r0
lda.l train + 0
sta.b tcc__r0
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c 0 r type 0x10)
; length xxy 2 vtop->type 0x10
clc
lda.b tcc__r0
adc.w #16
sta.b tcc__r0
; load 1
; type 16 reg 0x3f0 extra 0x0
; ld2 [train + 2], tcc__r1
lda.l train + 2
sta.b tcc__r1
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r1 (0x1) (fr type 0x10 c 2 r type 0x10)
; length xxy 2 vtop->type 0x10
clc
lda.b tcc__r1
adc.w #16
sta.b tcc__r1
; ldpush before load type 0x10 reg 0x1
; ldpush2 (type 0x10 reg 0x1) tcc__r1
pei (tcc__r1)
; ldpush before load type 0x10 reg 0x0
; ldpush2 (type 0x10 reg 0x0) tcc__r0
pei (tcc__r0)
; push2 imm r 0xf0
pea.w 80
; call r 0x2f0
jsr.l oamSetXY
; add sp, #6
tsa
clc
adc #6
tas
; load 0
; type 16 reg 0x3f0 extra 0x0
; ld2 [train + 0], tcc__r0
lda.l train + 0
sta.b tcc__r0
; gen_opi len 2 op -
; sbc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c 0 r type 0x10)
; length xxy 2 vtop->type 0x10
sec
lda.b tcc__r0
sbc.w #32
sta.b tcc__r0
; load 1
; type 16 reg 0x3f0 extra 0x0
; ld2 [train + 2], tcc__r1
lda.l train + 2
sta.b tcc__r1
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r1 (0x1) (fr type 0x10 c 2 r type 0x10)
; length xxy 2 vtop->type 0x10
clc
lda.b tcc__r1
adc.w #16
sta.b tcc__r1
; ldpush before load type 0x10 reg 0x1
; ldpush2 (type 0x10 reg 0x1) tcc__r1
pei (tcc__r1)
; ldpush before load type 0x10 reg 0x0
; ldpush2 (type 0x10 reg 0x0) tcc__r0
pei (tcc__r0)
; push2 imm r 0xf0
pea.w 96
; call r 0x2f0
jsr.l oamSetXY
; add sp, #6
tsa
clc
adc #6
tas
; load 0
; type 16 reg 0x3f0 extra 0x0
; ld2 [train + 0], tcc__r0
lda.l train + 0
sta.b tcc__r0
; gen_opi len 2 op -
; sbc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c 0 r type 0x10)
; length xxy 2 vtop->type 0x10
sec
lda.b tcc__r0
sbc.w #16
sta.b tcc__r0
; load 1
; type 16 reg 0x3f0 extra 0x0
; ld2 [train + 2], tcc__r1
lda.l train + 2
sta.b tcc__r1
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r1 (0x1) (fr type 0x10 c 2 r type 0x10)
; length xxy 2 vtop->type 0x10
clc
lda.b tcc__r1
adc.w #16
sta.b tcc__r1
; ldpush before load type 0x10 reg 0x1
; ldpush2 (type 0x10 reg 0x1) tcc__r1
pei (tcc__r1)
; ldpush before load type 0x10 reg 0x0
; ldpush2 (type 0x10 reg 0x0) tcc__r0
pei (tcc__r0)
; push2 imm r 0xf0
pea.w 100
; call r 0x2f0
jsr.l oamSetXY
; add sp, #6
tsa
clc
adc #6
tas
; load 0
; type 16 reg 0x3f0 extra 0x0
; ld2 [train + 0], tcc__r0
lda.l train + 0
sta.b tcc__r0
; gen_opi len 2 op -
; sbc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c 0 r type 0x10)
; length xxy 2 vtop->type 0x10
sec
lda.b tcc__r0
sbc.w #64
sta.b tcc__r0
; load 1
; type 16 reg 0x3f0 extra 0x0
; ld2 [train + 2], tcc__r1
lda.l train + 2
sta.b tcc__r1
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r1 (0x1) (fr type 0x10 c 2 r type 0x10)
; length xxy 2 vtop->type 0x10
clc
lda.b tcc__r1
adc.w #16
sta.b tcc__r1
; ldpush before load type 0x10 reg 0x1
; ldpush2 (type 0x10 reg 0x1) tcc__r1
pei (tcc__r1)
; ldpush before load type 0x10 reg 0x0
; ldpush2 (type 0x10 reg 0x0) tcc__r0
pei (tcc__r0)
; push2 imm r 0xf0
pea.w 104
; call r 0x2f0
jsr.l oamSetXY
; add sp, #6
tsa
clc
adc #6
tas
; load 0
; type 16 reg 0x3f0 extra 0x0
; ld2 [train + 0], tcc__r0
lda.l train + 0
sta.b tcc__r0
; gen_opi len 2 op -
; sbc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c 0 r type 0x10)
; length xxy 2 vtop->type 0x10
sec
lda.b tcc__r0
sbc.w #48
sta.b tcc__r0
; load 1
; type 16 reg 0x3f0 extra 0x0
; ld2 [train + 2], tcc__r1
lda.l train + 2
sta.b tcc__r1
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r1 (0x1) (fr type 0x10 c 2 r type 0x10)
; length xxy 2 vtop->type 0x10
clc
lda.b tcc__r1
adc.w #16
sta.b tcc__r1
; ldpush before load type 0x10 reg 0x1
; ldpush2 (type 0x10 reg 0x1) tcc__r1
pei (tcc__r1)
; ldpush before load type 0x10 reg 0x0
; ldpush2 (type 0x10 reg 0x0) tcc__r0
pei (tcc__r0)
; push2 imm r 0xf0
pea.w 108
; call r 0x2f0
jsr.l oamSetXY
; add sp, #6
tsa
clc
adc #6
tas
; load 0
; type 16 reg 0x3f0 extra 0x0
; ld2 [train + 0], tcc__r0
lda.l train + 0
sta.b tcc__r0
; gen_opi len 2 op -
; sbc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c 0 r type 0x10)
; length xxy 2 vtop->type 0x10
sec
lda.b tcc__r0
sbc.w #96
sta.b tcc__r0
; load 1
; type 16 reg 0x3f0 extra 0x0
; ld2 [train + 2], tcc__r1
lda.l train + 2
sta.b tcc__r1
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r1 (0x1) (fr type 0x10 c 2 r type 0x10)
; length xxy 2 vtop->type 0x10
clc
lda.b tcc__r1
adc.w #16
sta.b tcc__r1
; ldpush before load type 0x10 reg 0x1
; ldpush2 (type 0x10 reg 0x1) tcc__r1
pei (tcc__r1)
; ldpush before load type 0x10 reg 0x0
; ldpush2 (type 0x10 reg 0x0) tcc__r0
pei (tcc__r0)
; push2 imm r 0xf0
pea.w 112
; call r 0x2f0
jsr.l oamSetXY
; add sp, #6
tsa
clc
adc #6
tas
; load 0
; type 16 reg 0x3f0 extra 0x0
; ld2 [train + 0], tcc__r0
lda.l train + 0
sta.b tcc__r0
; gen_opi len 2 op -
; sbc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c 0 r type 0x10)
; length xxy 2 vtop->type 0x10
sec
lda.b tcc__r0
sbc.w #80
sta.b tcc__r0
; load 1
; type 16 reg 0x3f0 extra 0x0
; ld2 [train + 2], tcc__r1
lda.l train + 2
sta.b tcc__r1
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r1 (0x1) (fr type 0x10 c 2 r type 0x10)
; length xxy 2 vtop->type 0x10
clc
lda.b tcc__r1
adc.w #16
sta.b tcc__r1
; ldpush before load type 0x10 reg 0x1
; ldpush2 (type 0x10 reg 0x1) tcc__r1
pei (tcc__r1)
; ldpush before load type 0x10 reg 0x0
; ldpush2 (type 0x10 reg 0x0) tcc__r0
pei (tcc__r0)
; push2 imm r 0xf0
pea.w 116
; call r 0x2f0
jsr.l oamSetXY
; add sp, #6
tsa
clc
adc #6
tas
; load 0
; type 16 reg 0x3f0 extra 0x0
; ld2 [train + 0], tcc__r0
lda.l train + 0
sta.b tcc__r0
; gen_opi len 2 op -
; sbc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c 0 r type 0x10)
; length xxy 2 vtop->type 0x10
sec
lda.b tcc__r0
sbc.w #128
sta.b tcc__r0
; load 1
; type 16 reg 0x3f0 extra 0x0
; ld2 [train + 2], tcc__r1
lda.l train + 2
sta.b tcc__r1
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r1 (0x1) (fr type 0x10 c 2 r type 0x10)
; length xxy 2 vtop->type 0x10
clc
lda.b tcc__r1
adc.w #16
sta.b tcc__r1
; ldpush before load type 0x10 reg 0x1
; ldpush2 (type 0x10 reg 0x1) tcc__r1
pei (tcc__r1)
; ldpush before load type 0x10 reg 0x0
; ldpush2 (type 0x10 reg 0x0) tcc__r0
pei (tcc__r0)
; push2 imm r 0xf0
pea.w 120
; call r 0x2f0
jsr.l oamSetXY
; add sp, #6
tsa
clc
adc #6
tas
; load 0
; type 16 reg 0x3f0 extra 0x0
; ld2 [train + 0], tcc__r0
lda.l train + 0
sta.b tcc__r0
; gen_opi len 2 op -
; sbc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c 0 r type 0x10)
; length xxy 2 vtop->type 0x10
sec
lda.b tcc__r0
sbc.w #112
sta.b tcc__r0
; load 1
; type 16 reg 0x3f0 extra 0x0
; ld2 [train + 2], tcc__r1
lda.l train + 2
sta.b tcc__r1
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r1 (0x1) (fr type 0x10 c 2 r type 0x10)
; length xxy 2 vtop->type 0x10
clc
lda.b tcc__r1
adc.w #16
sta.b tcc__r1
; ldpush before load type 0x10 reg 0x1
; ldpush2 (type 0x10 reg 0x1) tcc__r1
pei (tcc__r1)
; ldpush before load type 0x10 reg 0x0
; ldpush2 (type 0x10 reg 0x0) tcc__r0
pei (tcc__r0)
; push2 imm r 0xf0
pea.w 124
; call r 0x2f0
jsr.l oamSetXY
; add sp, #6
tsa
clc
adc #6
tas
; load 0
; type 16 reg 0x3f0 extra 0x0
; ld2 [train + 2], tcc__r0
lda.l train + 2
sta.b tcc__r0
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c 2 r type 0x10)
; length xxy 2 vtop->type 0x10
clc
lda.b tcc__r0
adc.w #25
sta.b tcc__r0
; ldpush before load type 0x10 reg 0x0
; ldpush2 (type 0x10 reg 0x0) tcc__r0
pei (tcc__r0)
; ldpush before load type 0x10 reg 0x3f0
; load 0
; type 16 reg 0x3f0 extra 0x0
; ld2 [train + 0], tcc__r0
lda.l train + 0
sta.b tcc__r0
; ldpush2 (type 0x10 reg 0x0) tcc__r0
pei (tcc__r0)
; push1 imm r 0xf0
sep #$20
lda #11
pha
rep #$20
; push1 imm r 0xf0
sep #$20
lda #10
pha
rep #$20
; call r 0x2f0
jsr.l animateRods
; add sp, #6
tsa
clc
adc #6
tas
; load 0
; type 17 reg 0x53f0 extra 0x0
; ld1 [train + 5], tcc__r0
lda.w #0
sep #$20
lda.l train + 5
rep #$20
sta.b tcc__r0
; gen_opi len 2 op 0x94
; cmpr(n)eq tcc__r0, #0
ldx #1
lda.b tcc__r0
sec
sbc #0
tay
beq +
dex
+
stx.b tcc__r5
; gtst inv 0 t 0 v 5 r 36406 ind 36406
; gsym_addr t 0 a 36445 ind 36445
; ERROR no jump found to patch
; tcc__r5 to compare reg
lda.b tcc__r5 ; DON'T OPTIMIZE
; gtst inv 0 t 0 v 243 r 36566 ind 36566
; cmp op 0x95 inv 0 v 243 r 36566
; cmp ne
beq +
; gsym_addr t 0 a 36656 ind 36656
; ERROR no jump found to patch
brl __local_0
+
; gtst finished; t 36566
; load 0
; type 17 reg 0x53f0 extra 0x0
; ld1 [train + 5], tcc__r0
lda.w #0
sep #$20
lda.l train + 5
rep #$20
sta.b tcc__r0
; gen_opi len 2 op 0x94
; cmpr(n)eq tcc__r0, #2
ldx #1
lda.b tcc__r0
sec
sbc #2
tay
beq +
dex
+
stx.b tcc__r5
; gtst inv 0 t 36566 v 5 r 36996 ind 36996
; gsym_addr t 36566 a 37039 ind 37039
; tcc__r5 to compare reg
lda.b tcc__r5 ; DON'T OPTIMIZE
; gtst inv 0 t 36566 v 243 r 37133 ind 37133
; cmp op 0x95 inv 0 v 243 r 37133
; cmp ne
beq +
__local_0:
; gsym_addr t 36566 a 37227 ind 37227
brl __local_1
+
; gtst finished; t 37133
; gtst inv 1 t 0 v 244 r 37306 ind 37306
; VT_jmp r 37306 t 0 ji 0 inv 1 vtop->c.i 37133
; gjmp_addr 0 at 37395
jmp.w __local_2
; gsym_addr t 37395 a 0 ind 37434
__local_1:
; gsym_addr t 37133 a 37468 ind 37468
; gtst finished; t 37395
; push2 imm r 0xf0
pea.w 12
; push2 imm r 0xf0
pea.w 12
; call r 0x2f0
jsr.l oamSetGfxOffset
; add sp, #4
tsa
clc
adc #4
tas
; push2 imm r 0xf0
pea.w 14
; push2 imm r 0xf0
pea.w 16
; call r 0x2f0
jsr.l oamSetGfxOffset
; add sp, #4
tsa
clc
adc #4
tas
; load 0
; type 16 reg 0x3f0 extra 0x82dfec80
; ld2 [train + 0], tcc__r0
lda.l train + 0
sta.b tcc__r0
; gen_opi len 2 op -
; sbc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c 0 r type 0x10)
; length xxy 2 vtop->type 0x10
sec
lda.b tcc__r0
sbc.w #128
sta.b tcc__r0
; load 1
; type 16 reg 0x3f0 extra 0x82dfec80
; ld2 [train + 2], tcc__r1
lda.l train + 2
sta.b tcc__r1
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r1 (0x1) (fr type 0x10 c 2 r type 0x10)
; length xxy 2 vtop->type 0x10
clc
lda.b tcc__r1
adc.w #8
sta.b tcc__r1
; ldpush before load type 0x10 reg 0x1
; ldpush2 (type 0x10 reg 0x1) tcc__r1
pei (tcc__r1)
; ldpush before load type 0x10 reg 0x0
; ldpush2 (type 0x10 reg 0x0) tcc__r0
pei (tcc__r0)
; push2 imm r 0xf0
pea.w 12
; call r 0x2f0
jsr.l oamSetXY
; add sp, #6
tsa
clc
adc #6
tas
; load 0
; type 16 reg 0x3f0 extra 0x82dfec80
; ld2 [train + 0], tcc__r0
lda.l train + 0
sta.b tcc__r0
; gen_opi len 2 op -
; sbc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c 0 r type 0x10)
; length xxy 2 vtop->type 0x10
sec
lda.b tcc__r0
sbc.w #112
sta.b tcc__r0
; load 1
; type 16 reg 0x3f0 extra 0x82dfec80
; ld2 [train + 2], tcc__r1
lda.l train + 2
sta.b tcc__r1
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r1 (0x1) (fr type 0x10 c 2 r type 0x10)
; length xxy 2 vtop->type 0x10
clc
lda.b tcc__r1
adc.w #8
sta.b tcc__r1
; ldpush before load type 0x10 reg 0x1
; ldpush2 (type 0x10 reg 0x1) tcc__r1
pei (tcc__r1)
; ldpush before load type 0x10 reg 0x0
; ldpush2 (type 0x10 reg 0x0) tcc__r0
pei (tcc__r0)
; push2 imm r 0xf0
pea.w 16
; call r 0x2f0
jsr.l oamSetXY
; add sp, #6
tsa
clc
adc #6
tas
; push2 imm r 0xf0
pea.w 2
; push2 imm r 0xf0
pea.w 80
; call r 0x2f0
jsr.l oamSetGfxOffset
; add sp, #4
tsa
clc
adc #4
tas
; load 0
; type 16 reg 0x3f0 extra 0x82dfec80
; ld2 [train + 0], tcc__r0
lda.l train + 0
sta.b tcc__r0
; gen_opi len 2 op -
; sbc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c 0 r type 0x10)
; length xxy 2 vtop->type 0x10
sec
lda.b tcc__r0
sbc.w #32
sta.b tcc__r0
; load 1
; type 16 reg 0x3f0 extra 0x82dfec80
; ld2 [train + 2], tcc__r1
lda.l train + 2
sta.b tcc__r1
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r1 (0x1) (fr type 0x10 c 2 r type 0x10)
; length xxy 2 vtop->type 0x10
clc
lda.b tcc__r1
adc.w #7
sta.b tcc__r1
; ldpush before load type 0x10 reg 0x1
; ldpush2 (type 0x10 reg 0x1) tcc__r1
pei (tcc__r1)
; ldpush before load type 0x10 reg 0x0
; ldpush2 (type 0x10 reg 0x0) tcc__r0
pei (tcc__r0)
; push2 imm r 0xf0
pea.w 0
; call r 0x2f0
jsr.l oamSetXY
; add sp, #6
tsa
clc
adc #6
tas
; load 0
; type 16 reg 0x3f0 extra 0x82dfec80
; ld2 [train + 0], tcc__r0
lda.l train + 0
sta.b tcc__r0
; gen_opi len 2 op -
; sbc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c 0 r type 0x10)
; length xxy 2 vtop->type 0x10
sec
lda.b tcc__r0
sbc.w #64
sta.b tcc__r0
; load 1
; type 16 reg 0x3f0 extra 0x82dfec80
; ld2 [train + 2], tcc__r1
lda.l train + 2
sta.b tcc__r1
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r1 (0x1) (fr type 0x10 c 2 r type 0x10)
; length xxy 2 vtop->type 0x10
clc
lda.b tcc__r1
adc.w #8
sta.b tcc__r1
; ldpush before load type 0x10 reg 0x1
; ldpush2 (type 0x10 reg 0x1) tcc__r1
pei (tcc__r1)
; ldpush before load type 0x10 reg 0x0
; ldpush2 (type 0x10 reg 0x0) tcc__r0
pei (tcc__r0)
; push2 imm r 0xf0
pea.w 4
; call r 0x2f0
jsr.l oamSetXY
; add sp, #6
tsa
clc
adc #6
tas
; load 0
; type 16 reg 0x3f0 extra 0x82dfec80
; ld2 [train + 0], tcc__r0
lda.l train + 0
sta.b tcc__r0
; gen_opi len 2 op -
; sbc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c 0 r type 0x10)
; length xxy 2 vtop->type 0x10
sec
lda.b tcc__r0
sbc.w #96
sta.b tcc__r0
; load 1
; type 16 reg 0x3f0 extra 0x82dfec80
; ld2 [train + 2], tcc__r1
lda.l train + 2
sta.b tcc__r1
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r1 (0x1) (fr type 0x10 c 2 r type 0x10)
; length xxy 2 vtop->type 0x10
clc
lda.b tcc__r1
adc.w #7
sta.b tcc__r1
; ldpush before load type 0x10 reg 0x1
; ldpush2 (type 0x10 reg 0x1) tcc__r1
pei (tcc__r1)
; ldpush before load type 0x10 reg 0x0
; ldpush2 (type 0x10 reg 0x0) tcc__r0
pei (tcc__r0)
; push2 imm r 0xf0
pea.w 8
; call r 0x2f0
jsr.l oamSetXY
; add sp, #6
tsa
clc
adc #6
tas
__local_2:
; gsym_addr t 37395 a 41919 ind 41919
; load 0
; type 17 reg 0x53f0 extra 0x0
; ld1 [train + 5], tcc__r0
lda.w #0
sep #$20
lda.l train + 5
rep #$20
sta.b tcc__r0
; gen_opi len 2 op 0x94
; cmpr(n)eq tcc__r0, #1
ldx #1
lda.b tcc__r0
sec
sbc #1
tay
beq +
dex
+
stx.b tcc__r5
; gtst inv 0 t 0 v 5 r 42191 ind 42191
; gsym_addr t 0 a 42230 ind 42230
; tcc__r5 to compare reg
lda.b tcc__r5 ; DON'T OPTIMIZE
; gtst inv 0 t 0 v 243 r 42320 ind 42320
; cmp op 0x95 inv 0 v 243 r 42320
; cmp ne
beq +
; gsym_addr t 0 a 42410 ind 42410
brl __local_3
+
; gtst finished; t 42320
; load 0
; type 17 reg 0x53f0 extra 0x0
; ld1 [train + 5], tcc__r0
lda.w #0
sep #$20
lda.l train + 5
rep #$20
sta.b tcc__r0
; gen_opi len 2 op 0x94
; cmpr(n)eq tcc__r0, #3
ldx #1
lda.b tcc__r0
sec
sbc #3
tay
beq +
dex
+
stx.b tcc__r5
; gtst inv 0 t 42320 v 5 r 42719 ind 42719
; gsym_addr t 42320 a 42762 ind 42762
; tcc__r5 to compare reg
lda.b tcc__r5 ; DON'T OPTIMIZE
; gtst inv 0 t 42320 v 243 r 42856 ind 42856
; cmp op 0x95 inv 0 v 243 r 42856
; cmp ne
beq +
__local_3:
; gsym_addr t 42320 a 42950 ind 42950
brl __local_4
+
; gtst finished; t 42856
; gtst inv 1 t 0 v 244 r 43029 ind 43029
; VT_jmp r 43029 t 0 ji 0 inv 1 vtop->c.i 42856
; gjmp_addr 0 at 43118
jmp.w __local_5
; gsym_addr t 43118 a 0 ind 43157
__local_4:
; gsym_addr t 42856 a 43191 ind 43191
; gtst finished; t 43118
; push2 imm r 0xf0
pea.w 44
; push2 imm r 0xf0
pea.w 12
; call r 0x2f0
jsr.l oamSetGfxOffset
; add sp, #4
tsa
clc
adc #4
tas
; push2 imm r 0xf0
pea.w 46
; push2 imm r 0xf0
pea.w 16
; call r 0x2f0
jsr.l oamSetGfxOffset
; add sp, #4
tsa
clc
adc #4
tas
; load 0
; type 16 reg 0x3f0 extra 0x82dfec80
; ld2 [train + 0], tcc__r0
lda.l train + 0
sta.b tcc__r0
; gen_opi len 2 op -
; sbc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c 0 r type 0x10)
; length xxy 2 vtop->type 0x10
sec
lda.b tcc__r0
sbc.w #128
sta.b tcc__r0
; load 1
; type 16 reg 0x3f0 extra 0x82dfec80
; ld2 [train + 2], tcc__r1
lda.l train + 2
sta.b tcc__r1
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r1 (0x1) (fr type 0x10 c 2 r type 0x10)
; length xxy 2 vtop->type 0x10
clc
lda.b tcc__r1
adc.w #7
sta.b tcc__r1
; ldpush before load type 0x10 reg 0x1
; ldpush2 (type 0x10 reg 0x1) tcc__r1
pei (tcc__r1)
; ldpush before load type 0x10 reg 0x0
; ldpush2 (type 0x10 reg 0x0) tcc__r0
pei (tcc__r0)
; push2 imm r 0xf0
pea.w 12
; call r 0x2f0
jsr.l oamSetXY
; add sp, #6
tsa
clc
adc #6
tas
; load 0
; type 16 reg 0x3f0 extra 0x82dfec80
; ld2 [train + 0], tcc__r0
lda.l train + 0
sta.b tcc__r0
; gen_opi len 2 op -
; sbc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c 0 r type 0x10)
; length xxy 2 vtop->type 0x10
sec
lda.b tcc__r0
sbc.w #112
sta.b tcc__r0
; load 1
; type 16 reg 0x3f0 extra 0x82dfec80
; ld2 [train + 2], tcc__r1
lda.l train + 2
sta.b tcc__r1
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r1 (0x1) (fr type 0x10 c 2 r type 0x10)
; length xxy 2 vtop->type 0x10
clc
lda.b tcc__r1
adc.w #7
sta.b tcc__r1
; ldpush before load type 0x10 reg 0x1
; ldpush2 (type 0x10 reg 0x1) tcc__r1
pei (tcc__r1)
; ldpush before load type 0x10 reg 0x0
; ldpush2 (type 0x10 reg 0x0) tcc__r0
pei (tcc__r0)
; push2 imm r 0xf0
pea.w 16
; call r 0x2f0
jsr.l oamSetXY
; add sp, #6
tsa
clc
adc #6
tas
; push2 imm r 0xf0
pea.w 3
; push2 imm r 0xf0
pea.w 80
; call r 0x2f0
jsr.l oamSetGfxOffset
; add sp, #4
tsa
clc
adc #4
tas
; load 0
; type 16 reg 0x3f0 extra 0x82dfec80
; ld2 [train + 0], tcc__r0
lda.l train + 0
sta.b tcc__r0
; gen_opi len 2 op -
; sbc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c 0 r type 0x10)
; length xxy 2 vtop->type 0x10
sec
lda.b tcc__r0
sbc.w #32
sta.b tcc__r0
; load 1
; type 16 reg 0x3f0 extra 0x82dfec80
; ld2 [train + 2], tcc__r1
lda.l train + 2
sta.b tcc__r1
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r1 (0x1) (fr type 0x10 c 2 r type 0x10)
; length xxy 2 vtop->type 0x10
clc
lda.b tcc__r1
adc.w #8
sta.b tcc__r1
; ldpush before load type 0x10 reg 0x1
; ldpush2 (type 0x10 reg 0x1) tcc__r1
pei (tcc__r1)
; ldpush before load type 0x10 reg 0x0
; ldpush2 (type 0x10 reg 0x0) tcc__r0
pei (tcc__r0)
; push2 imm r 0xf0
pea.w 0
; call r 0x2f0
jsr.l oamSetXY
; add sp, #6
tsa
clc
adc #6
tas
; load 0
; type 16 reg 0x3f0 extra 0x82dfec80
; ld2 [train + 0], tcc__r0
lda.l train + 0
sta.b tcc__r0
; gen_opi len 2 op -
; sbc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c 0 r type 0x10)
; length xxy 2 vtop->type 0x10
sec
lda.b tcc__r0
sbc.w #64
sta.b tcc__r0
; load 1
; type 16 reg 0x3f0 extra 0x82dfec80
; ld2 [train + 2], tcc__r1
lda.l train + 2
sta.b tcc__r1
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r1 (0x1) (fr type 0x10 c 2 r type 0x10)
; length xxy 2 vtop->type 0x10
clc
lda.b tcc__r1
adc.w #7
sta.b tcc__r1
; ldpush before load type 0x10 reg 0x1
; ldpush2 (type 0x10 reg 0x1) tcc__r1
pei (tcc__r1)
; ldpush before load type 0x10 reg 0x0
; ldpush2 (type 0x10 reg 0x0) tcc__r0
pei (tcc__r0)
; push2 imm r 0xf0
pea.w 4
; call r 0x2f0
jsr.l oamSetXY
; add sp, #6
tsa
clc
adc #6
tas
; load 0
; type 16 reg 0x3f0 extra 0x82dfec80
; ld2 [train + 0], tcc__r0
lda.l train + 0
sta.b tcc__r0
; gen_opi len 2 op -
; sbc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c 0 r type 0x10)
; length xxy 2 vtop->type 0x10
sec
lda.b tcc__r0
sbc.w #96
sta.b tcc__r0
; load 1
; type 16 reg 0x3f0 extra 0x82dfec80
; ld2 [train + 2], tcc__r1
lda.l train + 2
sta.b tcc__r1
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r1 (0x1) (fr type 0x10 c 2 r type 0x10)
; length xxy 2 vtop->type 0x10
clc
lda.b tcc__r1
adc.w #8
sta.b tcc__r1
; ldpush before load type 0x10 reg 0x1
; ldpush2 (type 0x10 reg 0x1) tcc__r1
pei (tcc__r1)
; ldpush before load type 0x10 reg 0x0
; ldpush2 (type 0x10 reg 0x0) tcc__r0
pei (tcc__r0)
; push2 imm r 0xf0
pea.w 8
; call r 0x2f0
jsr.l oamSetXY
; add sp, #6
tsa
clc
adc #6
tas
__local_5:
; gsym_addr t 43118 a 47642 ind 47642
; gsym_addr t 0 a 47680 ind 47680
; add sp, #__animateTrain_locals
.ifgr __animateTrain_locals 0
tsa
clc
adc #__animateTrain_locals
tas
.endif
rtl
.ENDS

.SECTION ".animateRodstext_0x6" SUPERFREE

animateRods:
; sub sp,#__animateRods_locals
.ifgr __animateRods_locals 0
tsa
sec
sbc #__animateRods_locals
tas
.endif
; load 0
; type 17 reg 0x53f0 extra 0x0
; ld1 [train + 5], tcc__r0
lda.w #0
sep #$20
lda.l train + 5
rep #$20
sta.b tcc__r0
; gen_opi len 2 op 0x94
; cmpr(n)eq tcc__r0, #0
ldx #1
lda.b tcc__r0
sec
sbc #0
tay
beq +
dex
+
stx.b tcc__r5
; gtst inv 1 t 0 v 5 r 48229 ind 48229
; gsym_addr t 0 a 48268 ind 48268
; tcc__r5 to compare reg
lda.b tcc__r5 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 48358 ind 48358
; cmp op 0x95 inv 1 v 243 r 48358
; cmp ne
bne +
; gsym_addr t 0 a 48448 ind 48448
brl __local_6
+
; gtst finished; t 48358
; load 0
; type 17 reg 0x1f2 extra 0x0
; ld1 [sp,3],tcc__r0
; stack adjust: fc + disp - loc - 256 -251
lda.w #0
sep #$20
lda 3 + __animateRods_locals + 1,s
rep #$20
sta.b tcc__r0
; gen_opi len 2 op 
; shl tcc__r0, #2
asl.b tcc__r0
asl.b tcc__r0
; load 1
; type 16 reg 0x1f2 extra 0x82dfec80
; ld2 [sp,7],tcc__r1
; stack adjust: fc + disp - loc - 256 -247
lda 7 + __animateRods_locals + 1,s
sta.b tcc__r1
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r1 (0x1) (fr type 0x10 c 7 r type 0x10)
; length xxy 2 vtop->type 0x10
inc.b tcc__r1
; ldpush before load type 0x10 reg 0x1
; ldpush2 (type 0x10 reg 0x1) tcc__r1
pei (tcc__r1)
; ldpush before load type 0x10 reg 0x1f2
; load 1
; type 16 reg 0x1f2 extra 0x0
; ld2 [sp,5],tcc__r1
; stack adjust: fc + disp - loc - 256 -247
lda 7 + __animateRods_locals + 1,s
sta.b tcc__r1
; ldpush2 (type 0x10 reg 0x1) tcc__r1
pei (tcc__r1)
; ldpush before load type 0x10 reg 0x0
; ldpush2 (type 0x10 reg 0x0) tcc__r0
pei (tcc__r0)
; call r 0x2f0
jsr.l oamSetXY
; add sp, #6
tsa
clc
adc #6
tas
; load 0
; type 17 reg 0x1f2 extra 0x0
; ld1 [sp,4],tcc__r0
; stack adjust: fc + disp - loc - 256 -250
lda.w #0
sep #$20
lda 4 + __animateRods_locals + 1,s
rep #$20
sta.b tcc__r0
; gen_opi len 2 op 
; shl tcc__r0, #2
asl.b tcc__r0
asl.b tcc__r0
; load 1
; type 16 reg 0x1f2 extra 0x82dfec80
; ld2 [sp,5],tcc__r1
; stack adjust: fc + disp - loc - 256 -249
lda 5 + __animateRods_locals + 1,s
sta.b tcc__r1
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r1 (0x1) (fr type 0x10 c 5 r type 0x10)
; length xxy 2 vtop->type 0x10
clc
lda.b tcc__r1
adc.w #16
sta.b tcc__r1
; load 2
; type 16 reg 0x1f2 extra 0x82dfec80
; ld2 [sp,7],tcc__r2
; stack adjust: fc + disp - loc - 256 -247
lda 7 + __animateRods_locals + 1,s
sta.b tcc__r2
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r2 (0x2) (fr type 0x10 c 7 r type 0x10)
; length xxy 2 vtop->type 0x10
inc.b tcc__r2
; ldpush before load type 0x10 reg 0x2
; ldpush2 (type 0x10 reg 0x2) tcc__r2
pei (tcc__r2)
; ldpush before load type 0x10 reg 0x1
; ldpush2 (type 0x10 reg 0x1) tcc__r1
pei (tcc__r1)
; ldpush before load type 0x10 reg 0x0
; ldpush2 (type 0x10 reg 0x0) tcc__r0
pei (tcc__r0)
; call r 0x2f0
jsr.l oamSetXY
; add sp, #6
tsa
clc
adc #6
tas
__local_6:
; gsym_addr t 48358 a 50749 ind 50749
; load 0
; type 17 reg 0x53f0 extra 0x0
; ld1 [train + 5], tcc__r0
lda.w #0
sep #$20
lda.l train + 5
rep #$20
sta.b tcc__r0
; gen_opi len 2 op 0x94
; cmpr(n)eq tcc__r0, #1
ldx #1
lda.b tcc__r0
sec
sbc #1
tay
beq +
dex
+
stx.b tcc__r5
; gtst inv 1 t 0 v 5 r 51021 ind 51021
; gsym_addr t 0 a 51060 ind 51060
; tcc__r5 to compare reg
lda.b tcc__r5 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 51150 ind 51150
; cmp op 0x95 inv 1 v 243 r 51150
; cmp ne
bne +
; gsym_addr t 0 a 51240 ind 51240
brl __local_7
+
; gtst finished; t 51150
; load 0
; type 17 reg 0x1f2 extra 0x0
; ld1 [sp,3],tcc__r0
; stack adjust: fc + disp - loc - 256 -251
lda.w #0
sep #$20
lda 3 + __animateRods_locals + 1,s
rep #$20
sta.b tcc__r0
; gen_opi len 2 op 
; shl tcc__r0, #2
asl.b tcc__r0
asl.b tcc__r0
; load 1
; type 16 reg 0x1f2 extra 0x82dfec80
; ld2 [sp,5],tcc__r1
; stack adjust: fc + disp - loc - 256 -249
lda 5 + __animateRods_locals + 1,s
sta.b tcc__r1
; gen_opi len 2 op -
; sbc tcc__r240 (0xf0), tcc__r1 (0x1) (fr type 0x10 c 5 r type 0x10)
; length xxy 2 vtop->type 0x10
dec.b tcc__r1
; ldpush before load type 0x10 reg 0x1f2
; load 2
; type 16 reg 0x1f2 extra 0x0
; ld2 [sp,7],tcc__r2
; stack adjust: fc + disp - loc - 256 -247
lda 7 + __animateRods_locals + 1,s
sta.b tcc__r2
; ldpush2 (type 0x10 reg 0x2) tcc__r2
pei (tcc__r2)
; ldpush before load type 0x10 reg 0x1
; ldpush2 (type 0x10 reg 0x1) tcc__r1
pei (tcc__r1)
; ldpush before load type 0x10 reg 0x0
; ldpush2 (type 0x10 reg 0x0) tcc__r0
pei (tcc__r0)
; call r 0x2f0
jsr.l oamSetXY
; add sp, #6
tsa
clc
adc #6
tas
; load 0
; type 17 reg 0x1f2 extra 0x0
; ld1 [sp,4],tcc__r0
; stack adjust: fc + disp - loc - 256 -250
lda.w #0
sep #$20
lda 4 + __animateRods_locals + 1,s
rep #$20
sta.b tcc__r0
; gen_opi len 2 op 
; shl tcc__r0, #2
asl.b tcc__r0
asl.b tcc__r0
; load 1
; type 16 reg 0x1f2 extra 0x82dfec80
; ld2 [sp,5],tcc__r1
; stack adjust: fc + disp - loc - 256 -249
lda 5 + __animateRods_locals + 1,s
sta.b tcc__r1
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r1 (0x1) (fr type 0x10 c 5 r type 0x10)
; length xxy 2 vtop->type 0x10
clc
lda.b tcc__r1
adc.w #16
sta.b tcc__r1
; gen_opi len 2 op -
; sbc tcc__r240 (0xf0), tcc__r1 (0x1) (fr type 0x10 c 5 r type 0x10)
; length xxy 2 vtop->type 0x10
dec.b tcc__r1
; ldpush before load type 0x10 reg 0x1f2
; load 2
; type 16 reg 0x1f2 extra 0x0
; ld2 [sp,7],tcc__r2
; stack adjust: fc + disp - loc - 256 -247
lda 7 + __animateRods_locals + 1,s
sta.b tcc__r2
; ldpush2 (type 0x10 reg 0x2) tcc__r2
pei (tcc__r2)
; ldpush before load type 0x10 reg 0x1
; ldpush2 (type 0x10 reg 0x1) tcc__r1
pei (tcc__r1)
; ldpush before load type 0x10 reg 0x0
; ldpush2 (type 0x10 reg 0x0) tcc__r0
pei (tcc__r0)
; call r 0x2f0
jsr.l oamSetXY
; add sp, #6
tsa
clc
adc #6
tas
__local_7:
; gsym_addr t 51150 a 53536 ind 53536
; load 0
; type 17 reg 0x53f0 extra 0x0
; ld1 [train + 5], tcc__r0
lda.w #0
sep #$20
lda.l train + 5
rep #$20
sta.b tcc__r0
; gen_opi len 2 op 0x94
; cmpr(n)eq tcc__r0, #2
ldx #1
lda.b tcc__r0
sec
sbc #2
tay
beq +
dex
+
stx.b tcc__r5
; gtst inv 1 t 0 v 5 r 53808 ind 53808
; gsym_addr t 0 a 53847 ind 53847
; tcc__r5 to compare reg
lda.b tcc__r5 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 53937 ind 53937
; cmp op 0x95 inv 1 v 243 r 53937
; cmp ne
bne +
; gsym_addr t 0 a 54027 ind 54027
brl __local_8
+
; gtst finished; t 53937
; load 0
; type 17 reg 0x1f2 extra 0x0
; ld1 [sp,3],tcc__r0
; stack adjust: fc + disp - loc - 256 -251
lda.w #0
sep #$20
lda 3 + __animateRods_locals + 1,s
rep #$20
sta.b tcc__r0
; gen_opi len 2 op 
; shl tcc__r0, #2
asl.b tcc__r0
asl.b tcc__r0
; load 1
; type 16 reg 0x1f2 extra 0x82dfec80
; ld2 [sp,7],tcc__r1
; stack adjust: fc + disp - loc - 256 -247
lda 7 + __animateRods_locals + 1,s
sta.b tcc__r1
; gen_opi len 2 op -
; sbc tcc__r240 (0xf0), tcc__r1 (0x1) (fr type 0x10 c 7 r type 0x10)
; length xxy 2 vtop->type 0x10
dec.b tcc__r1
; ldpush before load type 0x10 reg 0x1
; ldpush2 (type 0x10 reg 0x1) tcc__r1
pei (tcc__r1)
; ldpush before load type 0x10 reg 0x1f2
; load 1
; type 16 reg 0x1f2 extra 0x0
; ld2 [sp,5],tcc__r1
; stack adjust: fc + disp - loc - 256 -247
lda 7 + __animateRods_locals + 1,s
sta.b tcc__r1
; ldpush2 (type 0x10 reg 0x1) tcc__r1
pei (tcc__r1)
; ldpush before load type 0x10 reg 0x0
; ldpush2 (type 0x10 reg 0x0) tcc__r0
pei (tcc__r0)
; call r 0x2f0
jsr.l oamSetXY
; add sp, #6
tsa
clc
adc #6
tas
; load 0
; type 17 reg 0x1f2 extra 0x0
; ld1 [sp,4],tcc__r0
; stack adjust: fc + disp - loc - 256 -250
lda.w #0
sep #$20
lda 4 + __animateRods_locals + 1,s
rep #$20
sta.b tcc__r0
; gen_opi len 2 op 
; shl tcc__r0, #2
asl.b tcc__r0
asl.b tcc__r0
; load 1
; type 16 reg 0x1f2 extra 0x82dfec80
; ld2 [sp,5],tcc__r1
; stack adjust: fc + disp - loc - 256 -249
lda 5 + __animateRods_locals + 1,s
sta.b tcc__r1
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r1 (0x1) (fr type 0x10 c 5 r type 0x10)
; length xxy 2 vtop->type 0x10
clc
lda.b tcc__r1
adc.w #16
sta.b tcc__r1
; load 2
; type 16 reg 0x1f2 extra 0x82dfec80
; ld2 [sp,7],tcc__r2
; stack adjust: fc + disp - loc - 256 -247
lda 7 + __animateRods_locals + 1,s
sta.b tcc__r2
; gen_opi len 2 op -
; sbc tcc__r240 (0xf0), tcc__r2 (0x2) (fr type 0x10 c 7 r type 0x10)
; length xxy 2 vtop->type 0x10
dec.b tcc__r2
; ldpush before load type 0x10 reg 0x2
; ldpush2 (type 0x10 reg 0x2) tcc__r2
pei (tcc__r2)
; ldpush before load type 0x10 reg 0x1
; ldpush2 (type 0x10 reg 0x1) tcc__r1
pei (tcc__r1)
; ldpush before load type 0x10 reg 0x0
; ldpush2 (type 0x10 reg 0x0) tcc__r0
pei (tcc__r0)
; call r 0x2f0
jsr.l oamSetXY
; add sp, #6
tsa
clc
adc #6
tas
__local_8:
; gsym_addr t 53937 a 56328 ind 56328
; load 0
; type 17 reg 0x53f0 extra 0x0
; ld1 [train + 5], tcc__r0
lda.w #0
sep #$20
lda.l train + 5
rep #$20
sta.b tcc__r0
; gen_opi len 2 op 0x94
; cmpr(n)eq tcc__r0, #3
ldx #1
lda.b tcc__r0
sec
sbc #3
tay
beq +
dex
+
stx.b tcc__r5
; gtst inv 1 t 0 v 5 r 56600 ind 56600
; gsym_addr t 0 a 56639 ind 56639
; tcc__r5 to compare reg
lda.b tcc__r5 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 56729 ind 56729
; cmp op 0x95 inv 1 v 243 r 56729
; cmp ne
bne +
; gsym_addr t 0 a 56819 ind 56819
brl __local_9
+
; gtst finished; t 56729
; load 0
; type 17 reg 0x1f2 extra 0x0
; ld1 [sp,3],tcc__r0
; stack adjust: fc + disp - loc - 256 -251
lda.w #0
sep #$20
lda 3 + __animateRods_locals + 1,s
rep #$20
sta.b tcc__r0
; gen_opi len 2 op 
; shl tcc__r0, #2
asl.b tcc__r0
asl.b tcc__r0
; load 1
; type 16 reg 0x1f2 extra 0x82dfec80
; ld2 [sp,5],tcc__r1
; stack adjust: fc + disp - loc - 256 -249
lda 5 + __animateRods_locals + 1,s
sta.b tcc__r1
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r1 (0x1) (fr type 0x10 c 5 r type 0x10)
; length xxy 2 vtop->type 0x10
inc.b tcc__r1
; ldpush before load type 0x10 reg 0x1f2
; load 2
; type 16 reg 0x1f2 extra 0x0
; ld2 [sp,7],tcc__r2
; stack adjust: fc + disp - loc - 256 -247
lda 7 + __animateRods_locals + 1,s
sta.b tcc__r2
; ldpush2 (type 0x10 reg 0x2) tcc__r2
pei (tcc__r2)
; ldpush before load type 0x10 reg 0x1
; ldpush2 (type 0x10 reg 0x1) tcc__r1
pei (tcc__r1)
; ldpush before load type 0x10 reg 0x0
; ldpush2 (type 0x10 reg 0x0) tcc__r0
pei (tcc__r0)
; call r 0x2f0
jsr.l oamSetXY
; add sp, #6
tsa
clc
adc #6
tas
; load 0
; type 17 reg 0x1f2 extra 0x0
; ld1 [sp,4],tcc__r0
; stack adjust: fc + disp - loc - 256 -250
lda.w #0
sep #$20
lda 4 + __animateRods_locals + 1,s
rep #$20
sta.b tcc__r0
; gen_opi len 2 op 
; shl tcc__r0, #2
asl.b tcc__r0
asl.b tcc__r0
; load 1
; type 16 reg 0x1f2 extra 0x82dfec80
; ld2 [sp,5],tcc__r1
; stack adjust: fc + disp - loc - 256 -249
lda 5 + __animateRods_locals + 1,s
sta.b tcc__r1
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r1 (0x1) (fr type 0x10 c 5 r type 0x10)
; length xxy 2 vtop->type 0x10
clc
lda.b tcc__r1
adc.w #16
sta.b tcc__r1
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r1 (0x1) (fr type 0x10 c 5 r type 0x10)
; length xxy 2 vtop->type 0x10
inc.b tcc__r1
; ldpush before load type 0x10 reg 0x1f2
; load 2
; type 16 reg 0x1f2 extra 0x0
; ld2 [sp,7],tcc__r2
; stack adjust: fc + disp - loc - 256 -247
lda 7 + __animateRods_locals + 1,s
sta.b tcc__r2
; ldpush2 (type 0x10 reg 0x2) tcc__r2
pei (tcc__r2)
; ldpush before load type 0x10 reg 0x1
; ldpush2 (type 0x10 reg 0x1) tcc__r1
pei (tcc__r1)
; ldpush before load type 0x10 reg 0x0
; ldpush2 (type 0x10 reg 0x0) tcc__r0
pei (tcc__r0)
; call r 0x2f0
jsr.l oamSetXY
; add sp, #6
tsa
clc
adc #6
tas
__local_9:
; gsym_addr t 56729 a 59115 ind 59115
; gsym_addr t 0 a 59153 ind 59153
; add sp, #__animateRods_locals
.ifgr __animateRods_locals 0
tsa
clc
adc #__animateRods_locals
tas
.endif
rtl
.ENDS

.SECTION ".updateTraintext_0x7" SUPERFREE

updateTrain:
; sub sp,#__updateTrain_locals
.ifgr __updateTrain_locals 0
tsa
sec
sbc #__updateTrain_locals
tas
.endif
; load 0
; type 17 reg 0x53f0 extra 0x0
; ld1 [train + 4], tcc__r0
lda.w #0
sep #$20
lda.l train + 4
rep #$20
sta.b tcc__r0
; load 1
; type 0 reg 0x0 extra 0x4a4
; mov tcc__r0, tcc__r1
lda.b tcc__r0
sta.b tcc__r1
lda.b tcc__r0h
sta.b tcc__r1h
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x0 c 4 r type 0x11)
; length xxy 2 vtop->type 0x0
inc.b tcc__r0
; store r 0x0 fr 0x53f0 ft 0x11 fc 0x4
; st1 tcc__r0, [train,4]
sep #$20
lda.b tcc__r0
sta.l train + 4
rep #$20
; load 0
; type 16 reg 0x3f0 extra 0x0
; ld2 [train + 0], tcc__r0
lda.l train + 0
sta.b tcc__r0
; load 1
; type 0 reg 0x0 extra 0x4a4
; mov tcc__r0, tcc__r1
lda.b tcc__r0
sta.b tcc__r1
lda.b tcc__r0h
sta.b tcc__r1h
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x10 c 0 r type 0x10)
; length xxy 2 vtop->type 0x10
inc.b tcc__r0
; store r 0x0 fr 0x3f0 ft 0x10 fc 0x0
; st2 tcc__r0, [train,0]
lda.b tcc__r0
sta.l train + 0
; load 0
; type 17 reg 0x53f0 extra 0x0
; ld1 [train + 4], tcc__r0
lda.w #0
sep #$20
lda.l train + 4
rep #$20
sta.b tcc__r0
; gen_opi len 2 op 0x94
; cmpr(n)eq tcc__r0, #8
ldx #1
lda.b tcc__r0
sec
sbc #8
tay
beq +
dex
+
stx.b tcc__r5
; gtst inv 1 t 0 v 5 r 60630 ind 60630
; gsym_addr t 0 a 60669 ind 60669
; tcc__r5 to compare reg
lda.b tcc__r5 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 60759 ind 60759
; cmp op 0x95 inv 1 v 243 r 60759
; cmp ne
bne +
; gsym_addr t 0 a 60849 ind 60849
brl __local_10
+
; gtst finished; t 60759
; load 0
; type 17 reg 0xf0 extra 0x0
; ld1 #0,tcc__r0
lda.w #0
sta.b tcc__r0
; store r 0x0 fr 0x53f0 ft 0x11 fc 0x4
; st1 tcc__r0, [train,4]
sep #$20
lda.b tcc__r0
sta.l train + 4
rep #$20
; load 0
; type 17 reg 0x53f0 extra 0x0
; ld1 [train + 5], tcc__r0
lda.w #0
sep #$20
lda.l train + 5
rep #$20
sta.b tcc__r0
; load 1
; type 0 reg 0x0 extra 0x4a4
; mov tcc__r0, tcc__r1
lda.b tcc__r0
sta.b tcc__r1
lda.b tcc__r0h
sta.b tcc__r1h
; gen_opi len 2 op +
; adc tcc__r240 (0xf0), tcc__r0 (0x0) (fr type 0x0 c 5 r type 0x11)
; length xxy 2 vtop->type 0x0
inc.b tcc__r0
; store r 0x0 fr 0x53f0 ft 0x11 fc 0x5
; st1 tcc__r0, [train,5]
sep #$20
lda.b tcc__r0
sta.l train + 5
rep #$20
__local_10:
; gsym_addr t 60759 a 61603 ind 61603
; load 0
; type 17 reg 0x53f0 extra 0x0
; ld1 [train + 5], tcc__r0
lda.w #0
sep #$20
lda.l train + 5
rep #$20
sta.b tcc__r0
; gen_opi len 2 op 0x94
; cmpr(n)eq tcc__r0, #4
ldx #1
lda.b tcc__r0
sec
sbc #4
tay
beq +
dex
+
stx.b tcc__r5
; gtst inv 1 t 0 v 5 r 61875 ind 61875
; gsym_addr t 0 a 61914 ind 61914
; tcc__r5 to compare reg
lda.b tcc__r5 ; DON'T OPTIMIZE
; gtst inv 1 t 0 v 243 r 62004 ind 62004
; cmp op 0x95 inv 1 v 243 r 62004
; cmp ne
bne +
; gsym_addr t 0 a 62094 ind 62094
brl __local_11
+
; gtst finished; t 62004
; load 0
; type 17 reg 0xf0 extra 0x0
; ld1 #0,tcc__r0
lda.w #0
sta.b tcc__r0
; store r 0x0 fr 0x53f0 ft 0x11 fc 0x5
; st1 tcc__r0, [train,5]
sep #$20
lda.b tcc__r0
sta.l train + 5
rep #$20
__local_11:
; gsym_addr t 62004 a 62360 ind 62360
; gsym_addr t 0 a 62398 ind 62398
; add sp, #__updateTrain_locals
.ifgr __updateTrain_locals 0
tsa
clc
adc #__updateTrain_locals
tas
.endif
rtl
.ENDS
.RAMSECTION "ram{WLA_FILENAME}.data" APPENDTO "globram.data"

.ENDS

.SECTION "{WLA_FILENAME}.data" APPENDTO "glob.data"

.ENDS

.SECTION ".rodata" SUPERFREE

.ENDS

.RAMSECTION ".bss" BANK $7e SLOT 2
train dsb 8
.ENDS
